# acceptance tests for modMine

#results-report {
#  sql: select * from organism
#}

results-report {
  sql: SELECT s.dccid, s.title, p.surnamepi as project from submission s, project p where p.id = s.projectid;
 max-results: 20
}

results-report {
  sql: SELECT s.title, substring(lsf.class from '%.#"%#"' for '#') as feature, COUNT(*) FROM SequenceFeature AS lsf, submission s, bioentitiesdatasets bd where lsf.id = bd.bioentities and s.id = bd.datasets and lsf.class not like '%Chromosome' GROUP BY s.title, lsf.class ORDER BY s.title, lsf.class;
 max-results: 20
}

results-report {
  sql: select substring(class,25), count(*) from intermineobject group by class;
 max-results: 200
}

some-results {
  sql: select name, taxonid from organism where taxonid = '7227' or taxonid = '6239'
  note: we only want either D. melanogaster (7227) or C. elegans (6239) organisms.
}

some-results {
  sql: select name from organism
  note: we want at least 1 organism.
}

some-results {
  sql: select title from submission
  note: we want at least 1 submission.
}

no-results {
  sql: select s.dccid, sd.intermine_value as wikiref, sd.name from submissiondata sd, submission s where sd.submissionid=s.id and intermine_value like '%oldid%'
  note: To detect bug in the chadoxml and report it to dcc.
}


no-results {
  sql: select sd.intermine_value, sd.name, sd.id from submissiondata sd where intermine_value like '%oldid%' and submissionid is null
  note: All submission data should refer to a submission. Plus there is a bug in the chadoxml.
}

no-results {
  sql: SELECT distinct s.dccid, s.title, p.surnamepi as project from submission s, project p where p.id = s.projectid and s.dccid not in ( SELECT distinct s.dccid FROM SequenceFeature AS lsf, submission s, bioentitiesdatasets bd where lsf.id = bd.bioentities and s.id = bd.datasets and lsf.class not like '%Chromosome') order by project, s.dccid
  note: All submissions should have features.
}

no-results {
sql: SELECT s.dccid, e.type, e.name from experimentalfactor e, experimentalfactorssubmissions es, submission s where e.id = es.experimentalfactors and s.id = es.submissions and e.propertyid is null order by 1;
note: All experimental factors should have a value.
}

no-results {
sql: SELECT s.dccid, s.title, substring(lsf.class from '%.#"%#"' for '#') as feature, COUNT(*) FROM SequenceFeature AS lsf, submission s, bioentitiesdatasets bd where lsf.id = bd.bioentities and s.id = bd.datasets and lsf.class not like '%Chromosome' and lsf.chromosomelocationid is null GROUP BY s.dccid, s.title, lsf.class ORDER BY s.title, lsf.class;
note: All features should be located on a chromosome.
}

no-results {
  sql: select * from organism where genus is null or species is null or shortname is null or name is null or taxonid is null
  note: all fields of all organisms should be filled in
}
no-results {
  sql: select * from datasource where url is null or name is null;
  note: url and name of data source should be filled in
}

no-results {
  sql: select gene.id from gene where length > 1000000
  note: no genes should be too long
}
no-results {
  sql: select l1.id, l1.intermine_start, l2.id, l2.intermine_end from location as l1, location as l2 where l1.id = l2.id and l1.featureid = l2.featureid and l1.intermine_start = l2.intermine_start and l1.intermine_end = l2.intermine_end and l1.id <> l2.id
  note: no two location objects should have the same objectid, subjectid, start and end positions
}
no-results {
  sql: select rr1.primaryidentifier, rr1.id, rr2.primaryidentifier, rr2.id from regulatoryregion as rr1, regulatoryregion as rr2 where rr1.primaryidentifier = rr2.primaryidentifier and rr1.id <> rr2.id
  note: no two regulatoryregions should have the same primaryidentifier (see #564)
}
no-results {
  sql: select gene1.primaryidentifier, gene1.id, gene2.primaryidentifier, gene2.id from gene as gene1, gene as gene2 where gene1.primaryidentifier = gene2.primaryidentifier and gene1.id <> gene2.id
  note: no two genes should have the same primaryidentifier
}
no-results {
  sql: select protein1.primaryidentifier, protein1.id, protein2.primaryidentifier, protein2.id from protein as protein1, protein as protein2 where protein1.primaryidentifier = protein2.primaryidentifier and protein1.id <> protein2.id
  note: no two Protein objects should have the same primaryidentifier
}
no-results {
  sql: select transcript1.primaryidentifier, transcript1.id, transcript2.primaryidentifier, transcript2.id from transcript as transcript1, transcript as transcript2 where transcript1.primaryidentifier = transcript2.primaryidentifier and transcript1.id <> transcript2.id
  note: no two Transcript objects should have the same primaryidentifier
}
no-results {
  sql: select loc1.id, loc2.id, sv.id from location as loc1, location as loc2, sequencevariant as sv where loc1.subjectid = loc2.subjectid and loc1.subjectid = sv.id and loc1.id <> loc2.id
  note: no sequencevariants should have more than one location (ticket #540)
}
no-results {
  sql: select * from chromosomeband where primaryidentifier = '-'
  note: see #567
}
no-results {
  sql: select * from regulatoryregion where chromosomelocationid is null
  note: see #569
}
no-results {
  sql: select * from bioentity where primaryidentifier is null
  note: we should not have null primaryidentifier
}
no-results {
  sql: select lsf.id, lsf.primaryidentifier, intermine_sequence.id from SequenceFeature as lsf, intermine_sequence where intermine_sequence.id = sequenceid and length(intermine_sequence.residues) <> lsf.length
  note: SequenceFeature.length should equal the length of the Sequence.residues (see #669)
}
no-results {
  sql: select lsf.id, lsf.primaryidentifier, lsf.length, seq.id, seq.length from SequenceFeature as lsf, intermine_sequence as seq where lsf.sequenceid = seq.id and lsf.length != seq.length
  note: SequenceFeature.length should equal the length of the Sequence.length (see #669)
}
no-results {
  sql: select id, length from intermine_sequence where length <= 0;
  note: Sequence.length should be greater than 0
}
no-results {
  sql: select subjectid, class, intermine_value, count(*) from synonym group by subjectid, class, intermine_value having count(*) > 1
  note: If synonym key used correctly for all sources there should be no duplicate synonyms
}
no-results {
  sql: select primaryidentifier, count(*) from bioentity group by primaryidentifier having count(*) > 1
  note: There should be no duplicate primaryidentifier..
}
no-results {
  sql: select * from intermineobject where id in (select g.id from gene g where g.primaryidentifier is not null and not exists (select * from synonym s where s.intermine_value = g.primaryidentifier and s.subjectid = g.id)) limit 100
  note: all Genes should have their primaryidentifier as a synonim
}
no-results {
  sql: select * from intermineobject where id in (select g.id from gene g where g.symbol is not null and not exists (select * from synonym s where s.intermine_value = g.symbol and s.subjectid = g.id)) limit 100
  note: all Genes should have their symbol as a synonim
}
no-results {
  sql: select * from intermineobject where id in (select p.id from protein p where p.primaryAccession is not null and not exists (select * from synonym s where s.intermine_value = p.primaryAccession and s.subjectid = p.id)) limit 100
  note: all Proteins should have their primaryAccession as a synonim
}
no-results {
  sql: select t1.id, t1.primaryidentifier, t2.id, t2.primaryidentifier from protein as t1, protein as t2 where t1.id != t2.id and t1.primaryidentifier = t2.primaryidentifier
  note: no two Proteins should have the same primaryidentifier
}
#no-results {
#  sql: select * from protein where mrnaid is null;
#  note: all Proteins should have a non-null mrnaid
#}
no-results {
  sql: select * from mrna where proteinid is null;
  note: all MRNAs should have a non-null proteinid
}
no-results {
  sql: select distinct a1_.id, a1_.primaryidentifier, a1_.name, a2_.id, a2_.primaryidentifier from gene as a1_, intergenicregion as a2_, SequenceFeatureoverlappingfeatures as indirect0 where a1_.id = indirect0.overlappingfeatures and indirect0. = a2_.id
  note: No genes should overlap IntergenicRegions
}

#results-report {
#  sql: select * from datasource
#  max-results: 1000
#}

