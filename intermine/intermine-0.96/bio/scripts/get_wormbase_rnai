#!/usr/bin/perl

# gets wormbase rnai data from wormmart

use strict;
use warnings;
use IO::All;
use LWP::Simple;

BEGIN {
  # find the lib directory by looking at the path to this script
  push (@INC, ($0 =~ m:(.*)/.*:)[0] . '/../../intermine/perl/lib/');
}
use InterMine::DataDownloader;

#Define ARGVs
my ($logdir,$logname,$home,$file);
if(@ARGV!=4){
        #die "Wrong number of ARGVs!\nget_all.sh should supply the log directory, temporary log name, /shared/data/ and config file.\n";
        $logdir="/shared/data/download_logs/";
        $logname="temp_log.txt";
        $home="/shared/data";
}else{
        $logdir = $ARGV[0];
        $logname= $ARGV[1];
        $home = $ARGV[2];
}

# BioMart http server
my $biomart_server = "http://www.biomart.org/biomart/martservice";

#destination files and directories
my $main_dir = "$home/wormbase_rnai";
my $temp_dir = "$main_dir/temp";
my $current_link = "$home/current";
&checkdir_exists($main_dir);
&checkdir_exists($temp_dir);
my $updated = 0;

# old and new filenames
my $filename = "wormrnai.txt";
my $temp_file = "$temp_dir/$filename";
my $old_file = "$main_dir/current/$filename";

#define the URL for the BioMart data
my $query = '?query=<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Query><Query  virtualSchemaName = "default" formatter = "TSV" header = "0" uniqueRows = "0" count = "" datasetConfigVersion = "0.6" >';
$query .='<Dataset name = "wormbase_rnai" interface = "default" >';
$query .='<Attribute name = "inhibits_gene" />';
#$query .='<Attribute name = "inhibits_gene_public_name" />';
#$query .='<Attribute name = "phenotype" />';
#$query .='<Attribute name = "phenotype_primary_name" />';
#$query .='<Attribute name = "phenotype_short_name" />';
#$query .='<Attribute name = "phenotype_observed" />';
#$query .='<Attribute name = "phenotype_not" />';
#$query .='<Attribute name = "phenotype_penetrance_a" />';
#$query .='<Attribute name = "phenotype_penetrance_b" />';
#$query .='<Attribute name = "rnai" />';
#$query .='<Attribute name = "remark_dmlist" />';
$query .='</Dataset>';			
$query .='<Dataset name = "wormbase_paper" interface = "default" >';
$query .='<Attribute name = "pmid" />';
$query .='</Dataset>';
$query .='</Query>';

# temp!!!!!!
$query = '?query=<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Query><Query  virtualSchemaName = "default" header = "0" count = "" softwareVersion = "0.5" ><Dataset name ="aaegypti_gene_ensembl" interface = "default" ><Attribute name = "ensembl_gene_id" /><Attribute name = "ensembl_peptide_id" /></Dataset></Query>';

# slurp the contents of the URL and write it to a file
my $url = $biomart_server.$query;
print "Running query $query \n";
my $io = io"$url";
my $contents = $io->slurp;
open FH, ">$temp_file" or die "Cannot open $temp_file: $!";
print FH $contents;             
close FH;
print "Writing file ... \n"; 

#compare the new data to the existing file and keep it if it is different  
if(&compare_files($old_file,$temp_file)==1){
    print "Keeping downloaded files.\n";
    &update_files($main_dir,$filename,$temp_file,$current_link);
    $updated = 1;
}else{
    print "Downloaded files deleted.\n";
    unlink $temp_file;
}

#create data directory, move old files to archive and keep the new file 
sub update_files(){
    my ($dir,$filename,$tempfile,$link) = @_;
    
    # make new directory
    my $date = &convert_date();
    my $new_dir =  "$dir/$date";
    &checkdir_exists($new_dir);

    # move file
    my $new_file = "$new_dir/$filename";
    rename($tempfile, $new_file) or die "Cannot rename $tempfile: $!";

    # update current link
    #&make_link("$date",$link);

    # log
    my $log_buffer = "WormBaseRNAi\nNew data available in $new_dir containing file $new_file\n\n"; 
    my $version_buffer = "WormBaseRNAi data\n$date\n";
    &write_version($dir,$version_buffer);
}





