#!/usr/bin/perl -w

# release a new mine
#
# steps:
#  - find current and previous versions from properties file
#  - createdb new userprofile database <minename>-r<version>-userprofile
#  - precompute queries and templates
#  - create-db-userprofile with new properties file
#  - webapp clean-all
#  - update gbrowse properties
#  - stop old webapp
#  - write-userprofile-xml for current version
#  - read-userprofile-xml with new properties
#  - release webapp
#  - start new webapp
#  - start old webapp
#  - update apache rewrite/redirect configuration
#  - restart apache

BEGIN {
  my $DIR = ($0 =~ m:(.*)/.*:)[0];
  push (@INC, $DIR . '/../../intermine/perl/InterMine-Util/lib');
  push (@INC, $DIR . '/lib');
}

use strict;
use warnings;

use Getopt::Std;
use File::Copy;
use Date::Manip;
use Cwd;

use InterMine::Util qw(get_property_value get_latest_properties_version $INTERMINE_CONF_DIR);

# if (@ARGV != 0) {
#   die "$0: error, this script needs no arguments\n";
# }

my $current_dir = getcwd();

my $project_name = ($current_dir =~ m:.*/(.*):)[0];

my $PROP_FILE_PREFIX = "$project_name.properties";
my $WEBAPP_DIR = "$current_dir/webapp";
my $APACHE_CONF_FILENAME = '/etc/httpd/conf.d/proxy_ajp.conf';
my $OLDEST_VERSION = 1;
my $USERPROFILE_XML_FILENAME = "build/userprofile.xml";
my $USERPROFILE_XML_BACKUP_FILENAME = "$ENV{HOME}/backups/userprofile.xml";
my $START_DATE = UnixDate("now", "%O");
my $LOG_FILENAME = "$current_dir/$START_DATE.log";
my $GBROWSE_CONF_DIR = '/gbrowse/etc/gbrowse.conf/';

sub usage
{
  die <<"EOF";
usage:
  $0 [-b] [-e] [-t]

Without arguments the script will run the entire process of releasing the mine.

With flags:
 -b run only the first part of the script
   * find current and previous versions from properties file
   * createdb new userprofile database <minename>-r<version>-userprofile
   * precompute queries and templates
   * create-db-userprofile with new properties file
   * webapp clean-all
   * stop old webapp
   * write-userprofile-xml for current version
   * read-userprofile-xml with new properties
   * release webapp
   N.B.: the current release webapp is now stopped!!

 -e run only the second part of the script
   * start new webapp
   * start old webapp
   * update apache rewrite/redirect configuration
   * restart apache

 -t test run
  as -b but don't stop the old webapp

example:
  $0 -t

EOF
}

sub die_with_log
{
  my $message = shift;
  die "$message\n\nLog messages in: $LOG_FILENAME\n";
}


# start processing

if (!-d 'dbmodel') {
  die "$0: no dbmodel directory - this script must be run in a mine directory\n";
}


my %opts = ();
if (!getopts('bet', \%opts)) {
  usage();
}

my $all = 1;
my $begin = 0;
my $end = 0;
my $test = 0;

if ($opts{b}) {
  $begin = 1;
  $all = 0;
}

if ($opts{e}) {
  $end = 1;
  $all = 0;
}

if ($opts{t}) {
  $begin = 1;
  $all = 0;
  $test= 1;
#warn "$all, $begin, $test";
#exit 0;
}


#################


warn "reading current properties file\n";

my $current_version = get_latest_properties_version("$PROP_FILE_PREFIX.r") - 1;

warn "most recent version of $project_name: $current_version\n";

my $current_prop_filename = "$PROP_FILE_PREFIX.r$current_version";

warn "current properties file: $current_prop_filename\n";

# setting new_version globally. if we are doing the all procedure or the beginning,
# it will be increased by 1. otherwise we use (the already produced) new version

#my $new_version = $current_version;
my $new_version = $current_version + 1;
#$new_version = $current_version + 1;

my $new_prop_filename = "$INTERMINE_CONF_DIR/$PROP_FILE_PREFIX.r$new_version";

if ($begin || $all) {


#my $new_prop_filename = "$INTERMINE_CONF_DIR/$PROP_FILE_PREFIX.r$new_version";
#$new_prop_filename = "$INTERMINE_CONF_DIR/$PROP_FILE_PREFIX.r$new_version";

warn "reading properties from: $new_prop_filename\n";

my $prod_host = get_property_value("db.production.datasource.serverName", $new_prop_filename);
my $prod_db = get_property_value("db.production.datasource.databaseName", $new_prop_filename);
my $prod_user = get_property_value("db.production.datasource.user", $new_prop_filename);
my $prod_port;

if ($prod_host =~ /(.+):(\d+)/) {
  $prod_host = $1;
  $prod_port = $2;
}

my $new_userprofile = get_property_value("db.userprofile-production.datasource.databaseName",
                                         $new_prop_filename);

warn "read properties:\n";
warn "  prod_host: $prod_host\n";
warn "  prod_port: " . (defined($prod_port) ? $prod_port : "default") . "\n";
warn "  prod_db: $prod_db\n";
warn "  prod_user: $prod_user\n";
warn "  new_userprofile: $new_userprofile:\n";

# sub create_gbrowse_conf
# {
#   my $gbrowse_dir = shift;
#   my $old_version = shift;
#   my $new_version = shift;

#   my $old_file_name = "$GBROWSE_CONF_DIR/modmine-r$old_version.conf";
#   my $new_file_name = "$GBROWSE_CONF_DIR/modmine-r$new_version.conf";

#   warn "  creating new gbrowse conf: $new_file_name\n";

#   if (-e $new_file_name) {
#     die "trying to overwrite: $new_file_name - exiting\n";
#   }

#   open my $new_file, '>', $new_file_name or die "can't open $new_file_name: $!\n";

#   open my $old_file, '<', $old_file_name
#     or die "can't open $old_file_name: $!\n";

#   while (<$old_file>) {
#     s/(description\s*=.*release) $old_version/$1 $new_version/;
#     s|/release-$old_version|/release-$new_version|;
#     print $new_file $_;
#   }

#   close $new_file or die "can't close $new_file_name: $!\n";
#   close $old_file or die "can't close $old_file_name: $!\n";
# }


# create new userprofile database

system ("createdb -h $prod_host -U $prod_user -E SQL_ASCII -e $new_userprofile >> $LOG_FILENAME 2>&1") == 0
   or die_with_log "createdb failed: $?";


# load dump file of production database (if needed)

my $dump_file_name = undef;

if (@ARGV == 1) {
  die "unimplemented";
}


#################
# precompute queries and templates

chdir $WEBAPP_DIR
  or die "can't directory change to $WEBAPP_DIR (current dir:", $current_dir, ")\n";

# XXX TODO


#################
warn "webapp clean-all\n";

system ("ant -Drelease=r$new_version clean-all >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "failed to run clean-all failed: $?";


#################
warn "building new webapp\n";

chdir $WEBAPP_DIR or die "can't directory change to $WEBAPP_DIR\n";

system ("ant -Drelease=r$new_version default >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "failed to build webapp: $?";

#################

warn "create-db-userprofile with new properties file\n";

system ("ant -Drelease=r$new_version create-db-userprofile >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "create-db-userprofile failed: $?";

#################

#warn "copying gbrowse properties\n";

#create_gbrowse_conf($GBROWSE_CONF_DIR, $current_version, $new_version);

#################
if (!$test) {
warn "stopping old webapp (r$current_version)\n";

system ("ant -Drelease=r$current_version stop-webapp >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't stop webapp r$current_version: $!";
}

#################

#warn "***** exiting to run manually the userprofile update *******\n";
#exit 0;

warn "write-userprofile-xml for current version\n";

system ("ant -Drelease=r$current_version -v write-userprofile-xml >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't write userprofile XML: $?";

copy($USERPROFILE_XML_FILENAME, "$USERPROFILE_XML_BACKUP_FILENAME.r$current_version")
  or die_with_log "copy failed: $!";


#################
warn "read-userprofile-xml with new properties\n";

system ("ant -Drelease=r$new_version read-userprofile-xml >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't read userprofile XML into r$new_version: $?";


#################
warn "release new webapp r$new_version\n";

my @TARGETS = qw(remove-webapp release-webapp);
system ("ant -Drelease=r$new_version @TARGETS >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't release webapp r$new_version: $?";

#exit 0;
}
#################

if ($end || $all) {

warn "update apache rewrite/redirect configuration\n";

my $need_apache_config = 1;

my $apache_config = '';

my $tomcat_host = get_property_value('webapp.deploy.url', $new_prop_filename);

# getting the host from the properties
# (need to be stripped of 'http//' and ':8080'
$tomcat_host =~ s!http://(.*?)(:\d+)?!$1!;
#$tomcat_host =~ s!http://!$1!; # drop the http//
$tomcat_host =~ s/(:\d+).*$//; # cut :8080

warn "new tomcat host: $tomcat_host\n";

{
  open my $apache_conf_file, '<', $APACHE_CONF_FILENAME
    or die "can't open $APACHE_CONF_FILENAME for reading: $!\n";

  while(my $line = <$apache_conf_file>) {
    if ($line =~ m:/release-$new_version:) {
      $need_apache_config = 0;
      last;
    }

	if ($line =~ m:RewriteRule(.*)/release-$current_version:) {
  # added to change the present alias for intermine.modencode.org to the new version
   		$line =~ s/release-$current_version/release-$new_version/;
	}

#====  UNTESTED
  if ($line =~ m:ProxyPass(.*)/release-$current_version:) {
  # added to change the host for current release
      $line =~ s/$tomcat_host/modalone/;
  }

  if ($line =~ m:ProxyPassReverse(.*)/release-$current_version:) {
  # added to change the host for current release
      $line =~ s/$tomcat_host/modalone/;
  }
#====
    if ($line =~ m:</VirtualHost>:i) {
      $apache_config .= <<CONF;
    ProxyPass /release-$new_version ajp://$tomcat_host:8009/release-$new_version timeout=600
    ProxyPassReverse /release-$new_version http://$tomcat_host:8009/release-$new_version
CONF
    }

    $apache_config .= $line;
  }

  close $apache_conf_file;
}

if ($need_apache_config) {
  open my $apache_conf_file, '>', $APACHE_CONF_FILENAME
    or die "can't open $APACHE_CONF_FILENAME for writing: $!\n";

  print $apache_conf_file $apache_config;

  close $apache_conf_file;
}


#################
warn "restarting apache\n";

system ("sudo /etc/init.d/httpd restart >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't restart httpd: $?";


#################
warn "re-starting old webapp (r$current_version)\n";
system ("ant -Drelease=r$current_version start-webapp >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't start webapp r$current_version: $!";


#################
warn "re-deploy web site\n";

chdir "../../www/$project_name" or die "can't directory change to www/$project_name\n";

system ("ant -Drelease=r$new_version clean release-www >> $LOG_FILENAME 2>&1") == 0
  or die_with_log "can't re-release web site with new version (r$current_version): $!";

}
