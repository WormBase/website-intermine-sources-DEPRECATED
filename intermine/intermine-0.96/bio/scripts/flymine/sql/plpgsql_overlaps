CREATE OR REPLACE FUNCTION do_overlaps() RETURNS SETOF RECORD AS $$
DECLARE
    -- Need two arrays to hold old records.
    old_array location[];
    new_array location[];
    loc location;
    i int;
    retval RECORD;
    next_new int;
    last_objectid int;
    loc_count int;
    overlap_count int;
    deleted_count int;
    old_array_size int;
BEGIN
    old_array = '{}';
    last_objectid = 0;
    loc_count = 0;
    overlap_count = 0;
    deleted_count = 0;
    FOR loc IN SELECT * FROM location WHERE objectid <> 266008742 ORDER BY objectid, intermine_start, intermine_end LOOP
        new_array = '{}';
        next_new = 1;
        old_array_size = coalesce(array_upper(old_array, 1), 0);
        -- RAISE NOTICE 'Inspecting location %..%, array size %, output so far %, deleted %', loc.intermine_start, loc.intermine_end, old_array_size, overlap_count, deleted_count;
        -- RAISE NOTICE 'old_array = %', old_array;
        IF (old_array_size + 20 < deleted_count * 2) THEN
            FOR i IN 1..old_array_size LOOP
                -- RAISE NOTICE '    Inspecting old location %..%', old_array[i].intermine_start, old_array[i].intermine_end;
                IF (old_array[i].intermine_start IS NOT NULL AND old_array[i].intermine_end >= loc.intermine_start AND old_array[i].objectid = loc.objectid) THEN
                    -- RAISE NOTICE 'Found overlap';
                    SELECT INTO retval old_array[i].subjectid, loc.subjectid;
                    RETURN NEXT retval;
                    SELECT INTO retval loc.subjectid, old_array[i].subjectid;
                    RETURN NEXT retval;
                    new_array[next_new] = old_array[i];
                    next_new = next_new + 1;
                    overlap_count = overlap_count + 1;
                END IF;
            END LOOP;
            new_array[next_new] = loc;
            old_array = new_array;
            deleted_count = 0;
            -- RAISE NOTICE 'Compressing array from % to %', old_array_size, next_new - 1;
        ELSE
            FOR i IN 1..old_array_size LOOP
                -- RAISE NOTICE '    Inspecting old location %..%', old_array[i].intermine_start, old_array[i].intermine_end;
                IF (old_array[i].intermine_start IS NOT NULL AND old_array[i].intermine_end >= loc.intermine_start AND old_array[i].objectid = loc.objectid) THEN
                    -- RAISE NOTICE 'Found overlap';
                    SELECT INTO retval old_array[i].subjectid, loc.subjectid;
                    RETURN NEXT retval;
                    SELECT INTO retval loc.subjectid, old_array[i].subjectid;
                    RETURN NEXT retval;
                    overlap_count = overlap_count + 1;
                ELSIF (old_array[i].intermine_start IS NOT NULL) THEN
                    old_array[i] = NULL;
                    deleted_count = deleted_count + 1;
                END IF;
            END LOOP;
            old_array[old_array_size + 1] = loc;
        END IF;
        IF (loc.objectid <> last_objectid AND last_objectid <> 0) THEN
            RAISE NOTICE 'Last chromosome: % had % locations with % overlaps', last_objectid, loc_count, overlap_count;
            loc_count = 0;
            overlap_count = 0;
        END IF;
        loc_count = loc_count + 1;
        last_objectid = loc.objectid;
    END LOOP;
    IF (loc_count > 0) THEN
        RAISE NOTICE 'Last chromosome: % had % locations with % overlaps', last_objectid, loc_count, overlap_count;
    END IF;
END;
$$ LANGUAGE plpgsql;
