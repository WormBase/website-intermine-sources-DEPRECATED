CREATE OR REPLACE FUNCTION overlap_gene_primer() RETURNS SETOF RECORD AS $$
DECLARE
    -- This algorithm compares two different sets of locations, so we have to load one set into this array first.
    left_array location[];
    right_array location[];
    new_array location[];
    right_cursor NO SCROLL CURSOR FOR SELECT location.* FROM location, gene WHERE location.subjectid = gene.id AND objectid IN (1000050, 1000044, 1000005, 1000023, 1000010, 1000199) ORDER BY objectid, intermine_start, intermine_end;
    left_cursor NO SCROLL CURSOR FOR SELECT location.* FROM location, primer WHERE location.subjectid = primer.id ORDER BY objectid, intermine_start, intermine_end;
    left location;
    right location;
    i int;
    retval RECORD;
    next_new int;
    old_array_size int;
    left_deleted int;
    right_deleted int;
BEGIN
    left_array = '{}';
    right_array = '{}';
    OPEN left_cursor;
    OPEN right_cursor;
    FETCH left_cursor INTO left;
    FETCH right_cursor INTO right;
    left_deleted = 0;
    right_deleted = 0;
    WHILE (left.intermine_start IS NOT NULL OR right.intermine_start IS NOT NULL) LOOP
        WHILE (left.intermine_start IS NOT NULL AND (right.intermine_start IS NULL OR left.objectid < right.objectid OR (left.objectid = right.objectid AND left.intermine_start <= right.intermine_start))) LOOP
            old_array_size = coalesce(array_upper(right_array, 1), 0);
            -- RAISE NOTICE 'Fetched left location %..% on %, right array size %', left.intermine_start, left.intermine_end, left.objectid, old_array_size;
            IF (old_array_size + 20 < right_deleted * 2) THEN
                new_array = '{}';
                next_new = 1;
                FOR i IN 1..old_array_size LOOP
                    IF (right_array[i].intermine_start IS NOT NULL AND right_array[i].intermine_end >= left.intermine_start AND right_array[i].objectid = left.objectid) THEN
                        -- RAISE NOTICE 'Found overlap';
                        SELECT INTO retval left.subjectid, right_array[i].subjectid;
                        RETURN NEXT retval;
                        new_array[next_new] = right_array[i];
                        next_new = next_new + 1;
                    END IF;
                END LOOP;
                -- RAISE NOTICE 'Compressing right array from % to %', old_array_size, next_new - 1;
                right_array = new_array;
                right_deleted = 0;
            ELSE
                FOR i IN 1..old_array_size LOOP
                    IF (right_array[i].intermine_start IS NOT NULL AND right_array[i].intermine_end >= left.intermine_start AND right_array[i].objectid = left.objectid) THEN
                        -- RAISE NOTICE 'Found overlap';
                        SELECT INTO retval left.subjectid, right_array[i].subjectid;
                        RETURN NEXT retval;
                    ELSIF (right_array[i].intermine_start IS NOT NULL) THEN
                        right_array[i] = NULL;
                        right_deleted = right_deleted + 1;
                    END IF;
                END LOOP;
            END IF;
            old_array_size = coalesce(array_upper(left_array, 1), 0);
            IF (right.intermine_start IS NOT NULL) THEN
                left_array[old_array_size + 1] = left;
            END IF;
            FETCH left_cursor INTO left;
        END LOOP;
        WHILE (right.intermine_start IS NOT NULL AND (left.intermine_start IS NULL OR right.objectid < left.objectid OR (right.objectid = left.objectid AND right.intermine_start <= left.intermine_start))) LOOP
            old_array_size = coalesce(array_upper(left_array, 1), 0);
            -- RAISE NOTICE 'Fetched right location %..% on %, left array size %', right.intermine_start, right.intermine_end, right.objectid, old_array_size;
            IF (old_array_size + 20 < left_deleted * 2) THEN
                new_array = '{}';
                next_new = 1;
                FOR i IN 1..old_array_size LOOP
                    IF (left_array[i].intermine_start IS NOT NULL AND left_array[i].intermine_end >= right.intermine_start AND left_array[i].objectid = right.objectid) THEN
                        -- RAISE NOTICE 'Found overlap';
                        SELECT INTO retval left_array[i].subjectid, right.subjectid;
                        RETURN NEXT retval;
                        new_array[next_new] = left_array[i];
                        next_new = next_new + 1;
                    END IF;
                END LOOP;
                -- RAISE NOTICE 'Compressing left array from % to %', old_array_size, next_new - 1;
                left_array = new_array;
                left_deleted = 0;
            ELSE
                FOR i IN 1..old_array_size LOOP
                    IF (left_array[i].intermine_start IS NOT NULL AND left_array[i].intermine_end >= right.intermine_start AND left_array[i].objectid = right.objectid) THEN
                        -- RAISE NOTICE 'Found overlap';
                        SELECT INTO retval left_array[i].subjectid, right.subjectid;
                        RETURN NEXT retval;
                    ELSIF (left_array[i].intermine_start IS NOT NULL) THEN
                        left_array[i] = NULL;
                        left_deleted = left_deleted + 1;
                    END IF;
                END LOOP;
            END IF;
            old_array_size = coalesce(array_upper(right_array, 1), 0);
            IF (left.intermine_start IS NOT NULL) THEN
                right_array[old_array_size + 1] = right;
            END IF;
            FETCH right_cursor INTO right;
        END LOOP;
    END LOOP;
--    FOR loc IN SELECT location.* FROM location, primer WHERE location.subjectid = primer.id ORDER BY objectid, intermine_start, intermine_end LOOP
--        new_array = '{}';
--        next_new = 1;
--        old_array_size = coalesce(array_upper(old_array, 1), 0);
--        WHILE (next_gene <= genes_size AND genes[next_gene].objectid < loc.objectid) LOOP
--            next_gene = next_gene + 1;
--            skipped_genes = skipped_genes + 1;
--        END LOOP;
--        WHILE (next_gene <= genes_size AND genes[next_gene].intermine_start <= loc.intermine_start AND genes[next_gene].objectid = loc.objectid) LOOP
--            old_array_size = old_array_size + 1;
--            old_array[old_array_size] = genes[next_gene];
--            next_gene = next_gene + 1;
--            gene_count = gene_count + 1;
--        END LOOP;
--        -- RAISE NOTICE 'Inspecting location %..%, array size %, output so far %, deleted %', loc.intermine_start, loc.intermine_end, old_array_size, overlap_count, deleted_count;
--        -- RAISE NOTICE 'old_array = %', old_array;
--        IF (old_array_size + 20 < deleted_count * 2) THEN
--            FOR i IN 1..old_array_size LOOP
--                -- RAISE NOTICE '    Inspecting old location %..%', old_array[i].intermine_start, old_array[i].intermine_end;
--                IF (old_array[i].intermine_start IS NOT NULL AND old_array[i].intermine_end >= loc.intermine_start AND old_array[i].objectid = loc.objectid) THEN
--                    -- RAISE NOTICE 'Found overlap';
--                    SELECT INTO retval old_array[i].subjectid, loc.subjectid;
--                    RETURN NEXT retval;
--                    new_array[next_new] = old_array[i];
--                    next_new = next_new + 1;
--                    overlap_count = overlap_count + 1;
--                END IF;
--            END LOOP;
--            old_array = new_array;
--            deleted_count = 0;
--            -- RAISE NOTICE 'Compressing array from % to %', old_array_size, next_new - 1;
--        ELSE
--            FOR i IN 1..old_array_size LOOP
--                -- RAISE NOTICE '    Inspecting old location %..%', old_array[i].intermine_start, old_array[i].intermine_end;
--                IF (old_array[i].intermine_start IS NOT NULL AND old_array[i].intermine_end >= loc.intermine_start AND old_array[i].objectid = loc.objectid) THEN
--                    -- RAISE NOTICE 'Found overlap';
--                    SELECT INTO retval old_array[i].subjectid, loc.subjectid;
--                    RETURN NEXT retval;
--                    overlap_count = overlap_count + 1;
--                ELSIF (old_array[i].intermine_start IS NOT NULL) THEN
--                    old_array[i] = NULL;
--                    deleted_count = deleted_count + 1;
--                END IF;
--            END LOOP;
--        END IF;
--        IF (loc.objectid <> last_objectid AND last_objectid <> 0) THEN
--            RAISE NOTICE 'Last chromosome: % had % genes and % primers with % overlaps', last_objectid, gene_count, loc_count, overlap_count;
--            loc_count = 0;
--            gene_count = 0;
--            overlap_count = 0;
--        END IF;
--        loc_count = loc_count + 1;
--        last_objectid = loc.objectid;
--    END LOOP;
--    IF (loc_count > 0) THEN
--        RAISE NOTICE 'Last chromosome: % had % genes and % primers with % overlaps', last_objectid, gene_count, loc_count, overlap_count;
--    END IF;
--    IF (skipped_genes > 0) THEN
--        RAISE NOTICE 'Skipped genes: %', skipped_genes;
--    END IF;
--    RAISE NOTICE 'Genes at end: %', genes_size - next_gene;
END;
$$ LANGUAGE plpgsql;
