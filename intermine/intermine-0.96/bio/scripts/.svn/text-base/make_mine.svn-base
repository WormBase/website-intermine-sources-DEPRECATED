#!/usr/bin/perl

use strict;
use warnings;
use File::Find;
use File::Path;
use Cwd;

my $BIO_DIR = 'bio';
my $STRUCTURE_DIR = "$BIO_DIR/skeletons/mine";

sub usage
{
  my $message = shift;

  die <<"MESSAGE";
$0: $message
usage:
  $0 <mine-name>

The mine will be created in directory with a lowercase name
  eg. $0 FooMine
will create a directory called foomine
MESSAGE
}

if (@ARGV != 1) {
  usage (<<USAGE);
needs one argument
USAGE
}

my $mine_name = shift;
my $mine_dir = lc $mine_name;

my %substitutions = (
                     'mine-name' => $mine_name,
                     'mine-dir' => $mine_dir,
                    );

# check that we're in the right part of checkout

if (!-d 'imbuild' || !-d 'intermine') {
  usage (<<MESSAGE);
need to run in the top level of an intermine checkout (containing
"imbuild" and "intermine")
MESSAGE
}

my $start_dir = getcwd;

my $new_mine_dir = "$start_dir/$mine_dir";

if (-e $new_mine_dir) {
  usage (<<MESSAGE);
$new_mine_dir already exists
MESSAGE
}

sub process
{
  my $orig_path = "$start_dir/$File::Find::name";
  my $dest_path = $File::Find::name;

  $dest_path =~ s:$STRUCTURE_DIR(.*):$new_mine_dir$1:;

  if (-d $orig_path) {
    mkpath($dest_path);
  } else {
    open my $orig, '<', $orig_path or die "can't open $orig_path: $!\n";
    open my $dest, '>', $dest_path or die "can't open $dest_path: $!\n";

    while (my $line = <$orig>) {
      for my $subs_key (keys %substitutions) {
        $line =~ s/\$\{$subs_key\}/$substitutions{$subs_key}/g;
      }

      print $dest $line;
    }

    close $orig or die "can't close $orig_path: $!\n";
    close $dest or die "can't close $dest_path: $!\n";
  }
}

sub preprocess
{
  return grep {$_ !~ /^(\.svn|.*~)$/} @_;
}

find({
      wanted => \&process, 
      preprocess => \&preprocess
     },
     $STRUCTURE_DIR);

warn "created $new_mine_dir directory for $mine_name\n";
