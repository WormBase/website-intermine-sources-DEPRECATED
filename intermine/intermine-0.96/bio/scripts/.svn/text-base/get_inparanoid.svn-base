#!/usr/bin/perl

#downloads sql tables from http://inparanoid.sbc.su.se/download/current/sqltables
#and compares it to the version pointed to by the current link in /shared/data/orthologues/inparanoid
#as a current version id for sql table files are not avaiable prior to download.

use strict;
use warnings;
use IO::All;

BEGIN {
  # find the lib directory by looking at the path to this script
  push (@INC, ($0 =~ m:(.*)/.*:)[0] . '/../../intermine/perl/lib/');
}
use InterMine::DataDownloader;

#Define ARGVs
my ($logdir,$logname,$home,$file);
if(@ARGV!=4){
	die "Wrong number of ARGVs!\nget_all.sh should supply the log directory, temporary log name, /shared/data/ and config file.\n";
}else{
	$logdir = $ARGV[0];
	$logname= $ARGV[1];
	$home = $ARGV[2];
	$file = $ARGV[3];
}

# get species from config file. Key code organisms must have orthologues with each other AND the
# other code organisms. Other code organisms must ONLY have orthologues with the key code organisms.
my %key_codes = &config_species($file,"key_inparanoid");
my %other_codes = &config_species($file,"other_inparanoid");

# data source and destination
my $inparanoid_server = "http://inparanoid.sbc.su.se/download/current/sqltables";
my $orthologues_dir = "$home/orthologues";
my $InP_main_dir = "$orthologues_dir/inparanoid";
my $download_dir = "$InP_main_dir/temp";
my $temp_file = "$download_dir/temp.txt";
my $log_buffer = "InParanoid\n";

# get a list of file names from inparanoid, if they represent two species in flymine, add them 
# to the hash of files to download 
my %files;

my @page = io($inparanoid_server)->slurp;

my $date = &convert_date();
my $updated = 0;

my ($version_buffer,$log_names,$log_start);
my $current_link = "$home/orthologues/inparanoid/current";

if(@page){    
    foreach (@page){
	#if an orthologue file is found
	if ($_=~ /href="(sqltable\.\w{3}(\w{5})\.fa-\w{3}(\w{5})\.fa)"/g) {
		#if the right combination of key and other organisms is found, add the filename to the files hash
		if( (exists $key_codes{$2} && (exists $other_codes{$3} || exists $key_codes{$3}) ) ||
			(exists $other_codes{$2} && (exists $key_codes{$3}) ) ){
			$files{$1}=$1;
		}	
	}
    }

    if (keys(%files)) { # if keys() not zero:

# download each file, check to see if it is a new version. it is assumed that either 
# all files will be upadated or all files will not
    &checkdir_exists($orthologues_dir);
    &checkdir_exists($InP_main_dir);
    &checkdir_exists($download_dir);

 
    for my $file_to_get (sort keys %files) {
	&http_download("$inparanoid_server/$file_to_get",$temp_file);
	my $old_file = "$current_link/$file_to_get";
	#compare new file to our current file
	if(&compare_files($old_file,$temp_file)==1){
		print "Keeping downloaded files.\n";
		&update_files($InP_main_dir,$file_to_get,$temp_file,$current_link);
		$updated = 1;
                print "updated\n";
	}else{
		print "Downloaded files deleted.\n";
		unlink $temp_file;
		$log_buffer .= "Current data ok\n\n";
	}
    }
    if($updated == 1){
        $version_buffer = "Orthologues and paralogues\n$date\nOrthologues and Paralogues between D. melanogaster, C. elegans, D. pseudoobscura, A. gambiae and A. mellifera. Also orthologues from these five organisms to C. familiaris, D. discoideum, D. rerio, G. gallus, H. sapiens, M. musculus, P. troglodytes, R. norvegicus, S. cerevisiae, S. pombe  from InParanoid\nhttp://inparanoid.sbc.su.se/\n";
        $log_buffer .= $log_start.$log_names."\n";
        &write_version($InP_main_dir,$version_buffer);
    }
    } else {
        $log_buffer .= "ERROR getting sql tables from InParanoid's website.\n";
    }
}else{
    $log_buffer .= "ERROR getting sql tables from InParanoid's website.\n";
}
$log_buffer .= "\n";
&write_log($log_buffer,$logdir,$logname);

sub update_files(){
	my ($dir,$new_name,$oldfile,$link) = @_;
	my $new_dir = "$dir/$date";
	my $newfile = "$new_dir/$new_name";
	&checkdir_exists($new_dir);
	rename($oldfile, $newfile) or die "Cannot rename $oldfile: $!";
	&make_link($date,$link);
	$log_start = "InParanoid\nNew data available in $new_dir containing file(s):\n";
	$log_names .= "$new_name\n";
	system "chmod -R a+r,g+w $new_dir";
}	
