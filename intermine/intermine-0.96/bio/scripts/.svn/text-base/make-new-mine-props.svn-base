#!/usr/bin/perl

# copy foomine.properties.r<number> to foomine.properties.r<number+1>
# and update properties that refer to r<number> or something-<number>

# eg. make-new-mine-props foomine db.production.datasource.databaseName \
#              db.userprofile-production.datasource.databaseName \
#              webapp.path project.releaseVersion gbrowse.database.source \
#              db.production.datasource.serverName

BEGIN {
  my $DIR = ($0 =~ m:(.*)/.*:)[0];
  push (@INC, $DIR . '/../../intermine/perl/lib');
  push (@INC, $DIR . '/lib');
}

use warnings;
use strict;

use Getopt::Std;

use InterMine::Util qw(get_latest_properties_version $INTERMINE_CONF_DIR);

my $RELEASE_VERSION_PROP = "project.releaseVersion";

sub usage
{
  my $message = shift;

  if (defined $message) {
    warn "$message\n\n";
  }

  die <<"USAGE";
$0 [-a machine_1,machine_2] [-d date_string] <mine_name> <property_name> [property_name_2 ...]

will look for properties files in $INTERMINE_CONF_DIR like "foomine.properties.r4"
and will update the properties with the given property names.  Any value of
those properties in eg. foomine.properties.r4 that says "...4..." will be
changed to "...5..." in the new properties file: foomine.properties.r5

use the -a flag to alternate between two machines - if machine_1 is
used for foomine.properties.r6 then use machine_2 for r7 (and vice
versa)

use the -d flag to pass a date to add to the $RELEASE_VERSION_PROP
USAGE
}

my %opts = ();

if (!getopts('a:d:', \%opts)) {
  usage();
}

if (@ARGV < 2) {
  usage('not enough arguments');
}

my $machine_1 = undef;
my $machine_2 = undef;

if ($opts{a}) {
  if ($opts{a} =~ /(.*),(.*)/) {
    $machine_1 = $1;
    $machine_2 = $2;
  } else {
    usage('the -a flag must have the format: machine_1,machine_2');
  }
}

my $date_string = $opts{d};

my $mine_name = shift;
my @properties_to_process = @ARGV;

my $prop_file_prefix = "$mine_name.properties.r";
my $current_version = get_latest_properties_version($prop_file_prefix);
my $current_prop_filename = "$INTERMINE_CONF_DIR/$mine_name.properties.r$current_version";
my $new_version = $current_version + 1;

my $new_prop_filename = "$INTERMINE_CONF_DIR/$mine_name.properties.r$new_version";

warn "  creating new properties file: $new_prop_filename\n";

if (-e $new_prop_filename) {
  die "$0: failed - will not overwrite existing properties: $new_prop_filename\n";
}

open my $new_prop_file, '>', $new_prop_filename
  or die "can't open $new_prop_filename: $!\n";

open my $current_file, '<', $current_prop_filename
  or die "can't open $current_prop_filename: $!\n";

sub unlink_and_die
{
  my $message = shift;
  warn <<"MESSAGE";
$message
unlinking $new_prop_filename
MESSAGE
  unlink $new_prop_filename;
  die "exiting\n";
}

my %processed = ();

while (defined (my $line = <$current_file>)) {
  if ($line =~ /^\s*([^=]+)=(.*)/) {
    my $prop_name = $1;
    my $prop_value = $2;
    if (grep {$_ eq $prop_name} @properties_to_process) {
      $processed{$prop_name} = 1;

      if (defined $machine_1) {
        my $machines = "$machine_1|$machine_2";
        if ($prop_value =~ /$machines/) {
          # swap machine names
          $prop_value =~ s/($machines)/($1 eq $machine_1) ? $machine_2 : $machine_1/eg;

          $line = "$prop_name=$prop_value\n";
        }
      }
      if ($prop_value =~ /^(.*?-|r|.*?-r|)(\d+)(.*)/) {
        if ($2 == $current_version) {
          #$line = "$prop_name=$1$new_version$3\n";
          # changed to accomodate date..
          if (defined $date_string && $prop_name eq $RELEASE_VERSION_PROP) {
            $line = "$prop_name=$1$new_version $date_string\n"
          } else {
            $line = "$prop_name=$1$new_version$3\n";
          }

        } else {
          unlink_and_die "line has wrong version ($2): $line";
        }
      }
    }
  }
} continue {
  print $new_prop_file $line;
}

close $new_prop_file or die "can't close $new_prop_filename: $!\n";
close $current_file or die "can't close $current_file: $!\n";

for my $prop_name (@properties_to_process) {

  if (!exists $processed{$prop_name}) {
    unlink_and_die "failed to process property $prop_name in $current_prop_filename";
  }
}
