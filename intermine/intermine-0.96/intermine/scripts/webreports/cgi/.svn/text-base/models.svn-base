#!/usr/bin/perl

use strict;
use warnings;
use Carp;
use Storable;
use DateTime;
use File::Basename;
use constant APP => 'InterMine-ModelComparer-0.1';

use HTML::Table;
use CGI qw(:standard);
use LWP::Simple qw(get);

use List::MoreUtils qw(uniq zip);

use Webservice::InterMine;
use InterMine::Model;

my $cache_file = dirname($ENV{SCRIPT_FILENAME}).'/../cached_data/models';
my $cache = eval{retrieve($cache_file)} || {};
my $order = sub {lc($a) cmp lc($b)};

# The two different methods used in an analysis, and things that change depending on them
my @wanted_values = ('get_own_fields', 'parental_class_descriptors', 'fields', 'ancestors'); 
my @wanted_labels = ('Declared fields', 'Direct superclasses', 'All fields', 'All superclasses');
my %label_hash    = zip(@wanted_values, @wanted_labels);
my @column_headers = ('has field in', 'Inherits from in');
push @column_headers, @column_headers;
my %col_header_for = zip(@wanted_values, @column_headers);

my $wanted = 
    (param('submitted'))
    ? param('wanted')   # User's choice
    : 'get_own_fields'; # default starting state

sub make_table_from_rows {
    my ($rows_ref, $row_order) = @_;
    my @rows = @$rows_ref;
    my @columns = ($row_order)
	          ? @$row_order
                  : sort($order keys %{$rows[0]});
    if (param('only_differences')) {
	@rows = grep {uniq(@{$_}{@columns[1 .. $#columns]}) > 1} @rows;
	return '' unless @rows;
    }
    my $table = HTML::Table->new( -rows  => (@rows + 1), 
                                  -cols => scalar(@columns),
                                  -class => 'list',
                                  -oddrowclass => 'odd');
    for my $col (1 .. @columns) {
	#    Set headers
        $table->setCell(1, $col, strong($columns[$col -1]) ); 
		# Fill body
        for my $row (2 .. @rows + 1) {
            my $content = $rows[$row - 2]->{$columns[$col -1]};
            $table->setCell($row, $col, $content);
        }
    }
    for my $row (2 .. @rows + 1) {
	my $colour;
	if (uniq(grep {$_ ne 'NO'} map {$table->getCell($row, $_)} (2 .. @columns)) > 1) {
	    $colour = 'orange';
	}
	else {
	    $colour = 'YellowGreen';
	}
	for my $col (2 .. @columns) {
	    $table->setCellBGColor(
		$row, $col, 
		(($table->getCell($row, $col) eq 'NO') ? 'OrangeRed' : $colour),
		);
	}
    }
    return $table;
}

my $model_from = $cache->{model_from};
my %link_to;
my %version_of;
my @services;
while (<DATA>) {
    chomp;
    next unless /^http/;
    my ($service_name) = /([a-z]+mine)/;
    ($service_name)    = /intermine\.(\w+)/ if ($service_name eq 'intermine');
    push @services, $service_name;
    $link_to{$service_name}       = $_;
    $version_of{$service_name}    = get($_ . '/service/version/release');
    next unless ($version_of{$service_name});
    next
	if ($cache->{version_of}{$service_name} eq $version_of{$service_name}
	    and defined $cache->{model_from});
    next if ((param('submitted')) and (not param($service_name)));
    $model_from->{$service_name} = Webservice::InterMine->get_service($_.'/service')->model;
}

store {model_from => $model_from, version_of => \%version_of,}, $cache_file;

### Write Service table
my %active = map 
    {($_ => (param('submitted')) 
            ? defined param($_)
            : 1)} 
    @services;
@services = grep {$active{$_}} @services;
my $service_table = HTML::Table->new();
while (my ($service, $url) = each %link_to) {
    $service_table->addRow(
	checkbox(-name    => $service, 
		  -checked => $active{$service}, 
		  -value   => 'ON', 
		  -label   => '',
	),	    
	strong(a({-href => $url},$service)),
	"Version: $version_of{$service}");
}
### Get an inclusive list of all classes in the three models
my %classes;
my $toprow =       {Class => 'Total Number of Classes'};
for my $service (@services) {
    my $model = $model_from->{$service};
    next unless $model;
    my $count;
    for my $class ($model->get_all_classdescriptors) {
	$classes{$class->name}++;
	$count++;
    }
    $toprow->{$service} = $count;
}
my @all_classes = sort($order keys %classes);

### Write main table 
my @rows   = map { {Class => $_} } @all_classes;
for my $row (@rows) {
    for my $service (@services) {
	my ($m, $c) = ($model_from->{$service}, $row->{Class});
	$row->{$service} = ((eval {$m->get_classdescriptor_by_name($c)})  
			       ? scalar(grep {$_->name ne $c} 
					$m->get_classdescriptor_by_name($c)->$wanted)
			       : 'NO');
    }
    # Set internal Anchors
    my @values = @{$row}{@services};
    next if (grep({$_ eq '0'} @values) == @values); # if all are '0'
    if ( grep({$_ ne 'NO' and $_ ne '0'} @values) > 1 ) {         # If more than one value is non-'NO' 
                                                    # (ie, there is something to compare)
	$row->{Class} = strong(a({-href => '#' . $row->{Class}}, $row->{Class}));
    }
}
unshift @rows, $toprow;
my $model_class_table = make_table_from_rows(\@rows);

### Write tables analysing individual classes
my @class_tables;

for my $class_name (@all_classes) {
    my (%fields, %fields_for);
    # Get an inclusive list of the fields
    while (my ($service, $model) = each %$model_from) {
        for (eval{$model->get_classdescriptor_by_name($class_name)->$wanted}) {
            next if ($_->name eq $class_name);
            push @{$fields_for{$service}}, $_->name; 
            $fields{$_->name}++;
        }
    }
    my $col1_name = $col_header_for{$wanted};
    my @rows      = map { {$col1_name => $_} } sort($order keys %fields);
    next unless @rows;
    for my $row (@rows) {
        for my $service (@services) {
            $row->{$service} = (grep {$row->{$col1_name} eq $_} @{$fields_for{$service}})
		              ? 'YES'
                              : 'NO';
        }
    }
    my $row_order = [$col1_name, sort($order grep {$_ ne $col1_name} keys %{$rows[0]})];
    my $class_table = make_table_from_rows(\@rows, $row_order);
    push (@class_tables, {name => $class_name, tbl => $class_table}) if $class_table;
}

my $dt   = DateTime->now;
$dt->set_time_zone('Europe/London');
my $date =  $dt->dmy('/');
my $time =  $dt->time;
my $title = 'Model Comparison';

my $main_table_link = a({-href => '#maintable'}, 'main table');
my $sub_table_link  = a({-href => '#subtables'}, 'sub-table');
my $options_table = HTML::Table->new(-rows => 1, -cols => 2, -class => 'list', -oddrowclass => 'odd');
$options_table->setCell(1, 1,
	  radio_group(
		      -name      => 'wanted',
		      -values    => \@wanted_values,
		      -default   => 'get_own_fields',
		      -linebreak => 1,
		      -labels    => \%label_hash,
		     ) .
	  checkbox(
		   -name    => 'only_differences',
		   -checked => 0,
		   -value   => 'ON',
		   -label   => 'Hide rows without differences',
		  )
      );
$options_table->setCell(1, 2, $service_table);

print(
      header,
      start_html( -title => $title,
		  -style =>{src => '/css/style.css'}),
      div({id => 'heading'},
	  div({id => 'banner'}, h1($title)),
	  img({
	       id => 'logo',
	       src => '/chrome/intermine_logo.png',
	       alt => 'Logo',
	       width => 600,
	       height => 75,
	      }),
	  div({class => 'clearall'}, ''),
	 ),

      div({id => 'content'},
	  div({id => 'menu'},
	      ul(li({-type => 'disc'},
		    [
		     a({-href => '/webreports'}, 'All Reports'),
#		     a({-href => '/webreports/analytics'}, 'Google Analytics for Templates'),
		     a({-href => '/webreports/models'},    'Model Comparison'),
		     a({-href => '/webreports/templates'}, 'Template Collection Comparison'),
		    ]
		   )
		),
	     ),
	  br,
	  p({align => 'right'}, small(i("Automatically generated on $date at $time"))),
	  p(<<'ENDQUOTE'),
This page has several tables to compare different elements found within the genomic models used by different InterMine implementations. These models were fetched from the respective webservices, and then analysed to create these tables. You can select which mines you would like to compare by using the checkboxes next to their names.
ENDQUOTE
	  p(<<"ENDQUOTE"),
The $main_table_link lists which classes appear in which Mine's model. Where the class is absent, the word "NO" appears in a red box. If the class is present, then either the number of fields declared in that class, or the number of classes the class directly inherits from, will appear in the cell, depending on the option selected. If the models with this class all have a class the same number of fields or supeclasses, then those models' cells are green. If there is a difference in the number of fields, then the cell is coloured orange. To filter out the uninteresting rows (ie. the ones where all the values are the same), you can choose to "hide rows without differences".
ENDQUOTE
	  p(<<"ENDQUOTE"),
To further investigate classes with differences you can click on the class name, which is a link that will take you to a $sub_table_link, showing which fields are present or absent in a particular model. Only classes that are present in more than one model, and where at least one model declares fields in that class, will have a sub-table, and thus a link.
ENDQUOTE
	  start_form,
	  br,
	  strong('Analyse differences in'),
	  br,
      $options_table,
	  submit('submitted', 'reanalyse'),
	  end_form,
	 ),
     );

if (@services) {
    print 
	div({id => 'sect'}, 
        h2(a({-name => 'maintable'}, $label_hash{$wanted} . ' of Classes By Model')),
        $model_class_table,
    ),	h2(a({-name => 'subtables'}, $label_hash{$wanted} . ' of Individual Classes By Model'));

    for my $table (@class_tables) {
	print h2(a({-name => $table->{name}}, $table->{name})),
	$table->{tbl};
    }
}
else {
    print 
	h2('No services selected - please select a service');
}
print end_html;

__DATA__
http://dough.stanford.edu:8080/yeastmine-dev
http://ratmine.mcw.edu/ratmine
http://preview.flymine.org/preview
http://intermine.modencode.org/query
http://zmine.cs.uoregon.edu:8080/dev-zfinmine
