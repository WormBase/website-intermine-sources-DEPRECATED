# acceptance tests for FlyMine

assert {
  sql: select count(*) = 19 from organism
  note: 12 drosophilas, anopheles, and 6 other model organisms
}

assert {
  sql: select count(*) >= 395000 from gene
}


assert {
    # http://www.uniprot.org/taxonomy/9606
    sql: select count(*) >= 14000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 4932;
}

assert {
    sql: select count(*) > 25000 and count(*) < 30000 from protein p, organism o where p.organismid = o.id and o.taxonid = 6239;
}

assert {
    # http://www.uniprot.org/taxonomy/7165
    sql: select count(*) >= 14000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7165;
}

assert {
    # http://www.uniprot.org/taxonomy/7217
    sql: select count(*) >= 14000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7217;
}

assert {
    # http://www.uniprot.org/taxonomy/7220
    sql: select count(*) >= 14000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7220;
}

assert {
    # http://www.uniprot.org/taxonomy/7222
    sql: select count(*) >= 14000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7222;
}

assert {
    # http://www.uniprot.org/taxonomy/7227
    sql: select count(*) > 20000 and count(*) < 30000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7227;
}

assert {
    # http://www.uniprot.org/taxonomy/7230
    sql: select count(*) > 14000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7230;
}

assert {
    # http://www.uniprot.org/taxonomy/7234
    sql: select count(*) > 16000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7234;
}

assert {
    # http://www.uniprot.org/taxonomy/7237
    sql: select count(*) > 15000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7237;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7238;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7240;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7244;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7245;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from protein p, organism o where p.organismid = o.id and o.taxonid = 7260;
}

assert {
    sql: select count(*) > 90000 and count(*) < 100000 from protein p, organism o where p.organismid = o.id and o.taxonid = 9606;
}

assert {
    sql: select count(*) > 60000 and count(*) < 70000 from protein p, organism o where p.organismid = o.id and o.taxonid = 10090;
}

assert {
    sql: select count(*) > 30000 and count(*) < 40000 from protein p, organism o where p.organismid = o.id and o.taxonid = 10116;
}


assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 4932;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 6239;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7165;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7217;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7220;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7222;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7227;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7230;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7234;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7237;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7238;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7240;
}

assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7244;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7245;
}
assert {
    sql: select count(*) > 15000 and count(*) < 20000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7260;
}
assert {
    sql: select count(*) > 20000 and count(*) < 25000 from gene g, organism o where g.organismid = o.id and o.taxonid = 7955;
}
assert {
    sql: select count(*) > 45000 and count(*) < 55000 from gene g, organism o where g.organismid = o.id and o.taxonid = 9606;
}
assert {
    sql: select count(*) > 35000 and count(*) < 40000 from gene g, organism o where g.organismid = o.id and o.taxonid = 10090;
}
assert {
    sql: select count(*) > 40000 and count(*) < 45000 from gene g, organism o where g.organismid = o.id and o.taxonid = 10116;
}


assert {
  sql: select count(*) >= 125783 from publication
}

assert {
  sql: select count(*) >= 64 and count(*) < 100 from chromosome
}

assert {
  sql: select count(*) >= 400000 from goannotation
}

no-results {
  sql: select * from organism where genus is null or species is null or shortname is null or name is null or taxonid is null
  note: all fields of all organisms should be filled in
}

no-results {
  sql: select * from datasource where url is null or name is null or description is null
  note: all fields of data source should be filled in
}

some-results {
  sql: select cds.id, primaryidentifier, length(intermine_sequence.residues), intermine_end - intermine_start + 1 as calc_length from cds, location, intermine_sequence where chromosomelocationid = location.id and length(intermine_sequence.residues) <> intermine_end - intermine_start + 1 limit 10
  note: make sure that there are at least some CDSs with lengths shorter than the end-start+1, which is evidence that the CDS lengths are the (sum of the exon lengths - UTR length) see #621
}
some-results {
  sql: select * from organism where name = 'Anopheles gambiae'
  note: We should have an Anopheles gambiae  object but not an Anopheles gambiae PEST one
}

# GO Converter doesn't create proteins
no-results {
  sql: select * from intermineobject where id in (select b.id from bioentity b where organismid is null and not exists (select p.id from proteindomain p where b.id = p.id) and not exists (select r.id from interactionregion r where b.id = r.id))
  note: all BioEntity objects should have an organism (exception if ProteinFeature)
}

no-results {
  sql: select gene.id from gene where length > 2000000
  note: no genes should be too long
}

no-results {
  sql: select l1.id, l1.intermine_start, l2.id, l2.intermine_end from location as l1, location as l2 where l1.featureid = l2.featureid and l1.locatedonid = l2.locatedonid and l1.intermine_start = l2.intermine_start and l1.intermine_end = l2.intermine_end and l1.id <> l2.id
  note: no two location objects should have the same objectid, subjectid, start and end positions
}
no-results {
  sql: select rr1.primaryidentifier, rr1.id, rr2.primaryidentifier, rr2.id from regulatoryregion as rr1, regulatoryregion as rr2 where rr1.primaryidentifier = rr2.primaryidentifier and rr1.id <> rr2.id
  note: no two regulatoryregions should have the same identifier (see #564)
}
no-results {
  sql: select gene1.primaryidentifier, gene1.id, gene2.primaryidentifier, gene2.id from gene as gene1, gene as gene2 where gene1.primaryidentifier = gene2.primaryidentifier and gene1.id <> gene2.id
  note: no two genes should have the same identifier
}

no-results {
  sql: select protein1.primaryaccession, protein1.id, protein2.primaryaccession, protein2.id from protein as protein1, protein as protein2 where protein1.primaryidentifier = protein2.primaryidentifier and protein1.id <> protein2.id
  note: no two Protein objects should have the same identifier
}

no-results {
  sql: select transcript1.primaryidentifier, transcript1.id, transcript2.primaryidentifier, transcript2.id from transcript as transcript1, transcript as transcript2 where transcript1.primaryidentifier = transcript2.primaryidentifier and transcript1.id <> transcript2.id
  note: no two Transcript objects should have the same identifier
}
no-results {
  sql: select loc1.id, loc2.id, sv.id from location as loc1, location as loc2, sequencevariant as sv where loc1.featureid = loc2.featureid and loc1.featureid = sv.id and loc1.id <> loc2.id
  note: no sequencevariants should have more than one location (ticket #540)
}
no-results {
  sql: select * from chromosomeband where primaryidentifier = '-'
  note: see #567
}
no-results {
  sql: select * from regulatoryregion where chromosomelocationid is null
  note: see #569
}
#no-results {
#  sql: select lsf.id, lsf.primaryidentifier, intermine_sequence.id from sequencefeature as lsf, intermine_sequence where intermine_sequence.id = sequenceid and length(intermine_sequence.residues) <> lsf.length
#  note: sequencefeature.length should equal the length of the Sequence.residues (see #669)
#}

# not anymore.  one length is the distance on the chromosome from start to end, the other is the length of the sequence.  for MRNAs, this won't be the same.
#no-results {
#  sql: select lsf.id, lsf.primaryidentifier, lsf.length, seq.id, seq.length from sequencefeature as lsf, intermine_sequence as seq where lsf.sequenceid = seq.id and lsf.length != seq.length
#  note: sequencefeature.length should equal the length of the Sequence.length (see #669)
#}
no-results {
  sql: select id, length from intermine_sequence where length <= 0
  note: Sequence.length should be greater than 0
}
no-results {
  sql: select subjectid, intermine_value, count(*) from synonym group by subjectid, intermine_value having count(*) > 1
  note: If synonym key used correctly for all sources there should be no duplicate synonyms
}

#no-results {
#  sql: select * from intermineobject where id in (select b.id from bioentity b where b.primaryidentifier is not null and not exists (select * from synonym s where s.intermine_value = b.primaryidentifier and s.subjectid = b.id)) limit 100
 # note: all BioEntities should have their identifier as a synonm
#}
#no-results {
#  sql: select * from intermineobject where id in (select g.id from gene g where g.primaryIdentifier is not null and not exists (select * from synonym s where s.intermine_value = g.primaryIdentifier and s.subjectid = g.id)) limit 100
 # note: all Genes should have their primaryIdentifier as a synonm
#}
#no-results {
#  sql: select * from intermineobject where id in (select g.id from gene g where g.symbol is not null and not exists (select * from synonym s where s.intermine_value = g.symbol and s.subjectid = g.id)) limit 100
#  note: all Genes should have their symbol as a synonm
#}
#no-results {
#  sql: select * from intermineobject where id in (select p.id from protein p where p.primaryAccession is not null and not exists (select * from synonym s where s.intermine_value = p.primaryAccession and s.subjectid = p.id)) limit 100
#  note: all Proteins should have their primaryAccession as a synonm
#}

no-results {
  sql: select * from mrna where proteinid is null
  note: all MRNAs should have a non-null proteinid
}

# FIXME matthew is working on this
#no-results {
#  sql: select distinct a1_.id, a1_.primaryidentifier, a1_.name, a2_.id, a2_.primaryidentifier from gene as a1_, intergenicregion as a2_, sequencefeatureoverlappingfeatures as indirect0 where a1_.id = indirect0.overlappingfeatures and indirect0. = a2_.id
#  note: No genes should overlap IntergenicRegions
#}

no-results {
  sql: select * from organism where name = 'Anopheles gambiae PEST'
  note: We should have an Anopheles gambiae PEST object but not an Anopheles gambiae one
}

no-results {
  sql: select sourcename, count(*) from (select distinct primaryidentifier, secondaryidentifier, sourcename from transcript, tracker where objectid = transcript.id and primaryidentifier is null order by sourcename) as x group by sourcename
  note: affy-probes transcript should merge with flybase dmel ones.  See #1571
}

no-results {
  sql: select distinct primaryidentifier, secondaryidentifier, sourcename from transcript, tracker where objectid = transcript.id and primaryidentifier is null and sourcename = 'affy-probes' order by sourcename
  note: affy-probes transcript should merge with flybase dmel ones.  See #1571
}

no-results {
  sql: select sourcename, count(*) from (select distinct primaryidentifier, sourcename from probeset, tracker where objectid = probeset.id and primaryidentifier is null order by sourcename) as x group by sourcename
  note: flyatlas and affy probesets should merge
}

no-results {
  sql: select distinct t.sourcename, o.shortname, b.class from bioentity b, organism o, tracker t where b.organismid = o.id and t.objectid = b.id and b.id not in (select bioentities from bioentitiesdatasets) order by t.sourcename, o.shortname, b.class;
  note: all bioentities should have at least one dataset. See #1772
}

no-results {
  sql: select name from dataset where id NOT IN (select bioentities from bioentitiesdatasets);
  note: all datasets should have at least one bioentity
}

no-results {
  sql: select count(*),o.taxonid from gene g, organism o where g.primaryidentifier is null and g.organismid = o.id group by o.taxonid;
  note: all genes should merge
}

no-results {
  sql: select * from gene where organismid is null;
  note:  all genes should have an organism
}

no-results {
  sql: select * from gene g, organism o where g.name is null and o.id = g.organismid and o.taxonid = 7227;
  note:  all genes should have a name
}

no-results {
  sql: select d.name, p.primaryidentifier from protein p, bioentitiesdatasets b, dataset d, organism o where o.taxonid = 7227 and p.organismid = o.id and b.datasets = p.id and b.bioentities = d.id and (d.name = 'Swiss-Prot data set') and p.id not in (select genes from genesproteins) order by d.name, p.primaryidentifier;
  note: All UniProt proteins should have genes, see #1699
}

no-results {
  sql: select * from protein p, dataset d where p.name is null and p.secondaryidentifier is null and (d.name = 'Swiss-Prot data set' or d.name = 'TrEMBL data set');
  note: All UniProt proteins should have names
}

no-results {
  sql: select * from protein where primaryaccession LIKE '%,%';
  note: 119 isoforms (FlyMine release 16 preview) have commas in their names.
}

assert {
  sql: select count(*) >= 10000 from genesproteins where proteins IN (select id from protein where isuniprotcanonical = false)
  note: most isoforms should have genes
}

assert {
  sql:  select count(*) = 1 from genesproteins j, protein p where p.id = j.proteins and p.primaryidentifier = 'LOLA6_DROME-5';
  note: isoforms should have genes.
}

assert {
  sql: select count(*) >= 10000 from uniprotfeature where intermine_begin is not null and intermine_end is not null;
  note: uniprot features should have locations
}

no-results {
  sql: select primaryidentifier, count(*) from interactionregion group by primaryidentifier having count(*) > 1;
  note: there should never be objects with duplicate primaryidentifiers
}

assert {
  sql: select count(*) >= 14 from organism where id IN (select g.organismid from gene g, homologue h where g.id = h.geneid group by g.organismid);
  note: we have homologues from 14 different organisms
}

#select count(*), o.name from protein p, bioentitiesdatasets b, dataset d, organism o where p.organismid = o.id and b.datasets = p.id and b.bioentities = d.id and (d.title = 'TrEMBL data set' or d.title = 'Swiss-Prot data set') and p.id not in (select genes from genesproteins) group by o.name;
# count |            name
#-------+-----------------------------
#  6378 | Mus musculus
# 23148 | Homo sapiens
#   552 | Drosophila pseudoobscura
#  4442 | Drosophila melanogaster
#   481 | Apis mellifera
#   715 | Saccharomyces cerevisiae
#  1405 | Caenorhabditis elegans
#    19 | Anopheles gambiae str. PEST
#(8 rows)


# uniprot should have proteins and genes from several organisms

# interactions
# * maybe these are already tested by templates

# Tiling path spans don't have chromsomes

# no duplicate chromosomes #1790
