#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Std;
use Cwd 'abs_path';
use File::Basename;

my $REPO = $ENV{REPO};

if (!defined $REPO) {
  usage ("REPO enviroment variable not set");
}

$REPO =~ s!/+$!!g;

my $TRUNK = "$REPO/trunk";
my $BRANCHES = "$REPO/branches";
my $TAGS = "$REPO/tags";
my $TICKETS = "$REPO/tickets";
my $SVN = 'svn';

sub usage {
  my $mess = shift;
  if (defined $mess) {
    warn "$mess\n";
  }
  die <<"EOF";
usage:
  $0 -c <ticket_num>|<branch_name>
    create a branch (if it doesn't exist), if the argument is a number create a
    ticket branch like /tickets/ticket-1234/
or
  $0 -s <ticket_num>|<branch_name>
    switch the working copy to the given branch or to the branch for the given
    ticket
  $0 -f -s <ticket_num>|<branch_name>
    force switch, even if there are local changes
or
  $0 -g <ticket_num>|<branch_name>
    get a checkout of the given branch
or
  $0 -p
    pull latest changes from the trunk into the current ticket or branch
    directory
or
  $0 -m <ticket_num>|<branch_name>
    merge a branch back into the trunk and remove the branch
or
  $0 -d <ticket_num>|<branch_name>
    delete a branch
or
  $0 -l [-v]
    list the existing branches, ticket branches first
    with -v, list tags too
or
  $0 -t
    switch working copy to trunk
  $0 -f -t
    force switch to trunk, even if there are local changes
or
  $0 <ticket_num>|<branch_name>
    report if the given branch exists
or
  $0 <directory_name>
    report on the checkout in the given directory
or
  $0
    report on the checkout in the current directory (same as "$0 .")

Some combinations of options make sense, eg.
  $0 -cs <ticket_num>
    create a branch for given ticket and then switch the working copy to it
EOF
}

my %opts = ();

my $get_status = 0;

if (@ARGV == 0 or @ARGV == 1 and $ARGV[0] !~ /^-/) {
  $get_status = 1;
} else {
  if (!getopts('pscgmdltvhf?', \%opts)) {
    usage();
  }
}

if ($opts{h} || $opts{'?'}) {
  usage;
}

my $switch = 0;
my $create = 0;
my $delete = 0;
my $merge = 0;
my $list = 0;
my $get_checkout = 0;
my $move_to_trunk = 0;
my $verbose = 0;
my $force = 0;
my $pull = 0;

if ($opts{s}) {
  $switch = 1;
}
if ($opts{c}) {
  $create = 1;
}
if ($opts{d}) {
  $delete = 1;
}
if ($opts{p}) {
  $pull = 1;
}
if ($opts{m}) {
  $merge = 1;
}
if ($opts{l}) {
  $list = 1;
}
if ($opts{g}) {
  $get_checkout = 1;
}
if ($opts{t}) {
  $move_to_trunk = 1;
}
if ($opts{v}) {
  $verbose = 1;
}
if ($opts{f}) {
  $force = 1;
}
if ($move_to_trunk || $pull) {
  if (@ARGV != 0) {
    usage("-t needs no argument");
  }
} else {
  if (@ARGV != 1 && !$get_status && !$merge && !$list) {
    usage("needs one argument - a ticket number");
  }
}

my $arg = $ARGV[0];

sub branch_exists
{
  my $branch = shift;
  system "$SVN ls $branch > /dev/null 2>&1";
  return $? == 0;
}

sub get_tick_dir_name
{
  my $tick_num = shift;
  return "ticket-$tick_num";
}

sub get_branch
{
  my $name = shift;

  my $type = undef;

  if ($name =~ /(.*):(.*)/) {
    $type = $1;
    $name = $2;
  }

  if (defined $type) {
    if ($type eq 'tag') {
      return "$TAGS/$name";
    } else {
      if ($type eq 'branch') {
        return "$BRANCHES/$name";
      } else {
        if ($type eq 'ticket') {
          return get_tick_branch($name);
        } else {
          die "unknown type: $type";
        }
      }
    }
  } else {
    for my $type (qw(ticket branch tag)) {
      my $branch = get_branch("$type:$name");
      if (branch_exists($branch)) {
        return $branch;
      }
    }
  }

  return undef;
}

sub get_tick_branch_name
{
  my $tick_num = shift;
  return "$TICKETS/" . get_tick_dir_name($tick_num)
}

sub get_branch_name
{
  my $name = shift;
  my $type = undef;

  if ($name =~ /(.*):(.*)/) {
    $type = $1;
    $name = $2;
  }

  if (!defined $type) {
    if ($name =~ /^\d+$/) {
      $type = 'ticket';
    } else {
      $type = 'branch';
    }
  }

  if ($type eq 'ticket') {
    return ('ticket', get_tick_branch_name($name), $name);
  } else {
    if ($type eq 'tag') {
      return ('tag', "$TAGS/$name", $name);
    } else {
      if ($type eq 'branch') {
        return ('branch', "$BRANCHES/$name", $name);
      } else {
        die "unknown type: $type";
      }
    }
  }
}

sub process_failure
{
  my $command = shift;
  warn "command failed: $command\n";
  if ($? == -1) {
    die "failed to execute: $!\n";
  }
  elsif ($? & 127) {
    die sprintf "child died with signal %d, %s coredump\n",
           ($? & 127),  ($? & 128) ? 'with' : 'without';
  }
  else {
    die sprintf "child exited with value %d\n", $? >> 8;
  }
}

if ($create) {
  my ($type, $branch, $name) = get_branch_name($arg);
  if (branch_exists($branch)) {
    warn("$arg exists : $branch\n");
  } else {
    my $mess;
    if ($type eq 'ticket') {
      $mess = "Created ticket branch. Refs #$name.";
    } else {
      $mess = "Created $type $name.";
    }

    my $command = "$SVN -m '$mess' cp $TRUNK $branch/";

    print "running: $command\n";
    system $command;
  }
}

if ($switch) {
  my ($type, $branch) = get_branch_name($arg);

  check_for_changes('.');

  if (branch_exists($branch)) {
    my @status = get_status('.');

    if (@status) {
      if ($status[0]->{subdir}) {
        $branch .= '/' . $status[0]->{subdir};
      }

      warn "switching to $branch\n";
      system "$SVN switch $branch .";
    } else {
      usage "not a ticket, branch, tag or trunk checkout";
    }
  } else {
    die "no branch exists for #$arg\n";
  }
}

if ($get_checkout) {
  my ($type, $branch) = get_branch_name($arg);

  my $dir_name = ($branch =~ m!.*/([^/]+)/?!)[0];

  if (-d $dir_name) {
    warn "$arg exists: $dir_name\n";
  } else {
    if (-d ".svn") {
      warn ".svn directory exists - not checking out $arg\n";
    } else {
      system "$SVN co $branch $dir_name";
    }
  }
}

if ($delete) {
  my ($type, $branch) = get_branch_name($arg);

  if (branch_exists($branch)) {
    my $mess;
    if ($type eq 'ticket') {
      $mess = "Removed ticket branch. Refs #$arg.";
    } else {
      $mess = "Removed $arg.";
    }

    warn "removing $branch\n";
    system "$SVN rm -m '$mess' $branch";
  } else {
    die "$arg does not exist\n";
  }
}

if ($pull) {
  my @status = get_status('.');

  if (!@status) {
    usage "must be in checkout\n";
  }

  my $status = $status[0];

  if (!($status->{type} eq 'ticket' || $status->{type} eq 'branch')) {
    usage "must be in ticket or branch checkout\n";
  }

  if ($status->{subdir}) {
    usage "must be the top level of a checkout\n";
  }

  my $branch = $status->{name};

  warn "merging trunk changes into $branch\n";
  system "$SVN merge $TRUNK";
}

if ($merge) {
  my $real_tick_num;

  my @status = get_status('.');

  if (!@status) {
    usage "must be in checkout\n";
  }

  my $status = $status[0];

  if ($status->{subdir}) {
    usage "must be the top level of a checkout\n";
  }

  if (defined $arg) {
    if (not ($status->{type} eq 'trunk' or
             $status->{type} eq 'ticket' and $status->{name} eq $arg)) {
      die "must be in a trunk checkout or in a checkout of ticket #$arg\n";
    }
    $real_tick_num = $arg;
  } else {
    if (!defined $status or $status->{type} ne 'ticket') {
      usage("must specify a ticket number or be in a ticket branch checkout");
    }
    $real_tick_num = $status->{name};
  }
  my ($type, $tick_branch) = get_branch_name($real_tick_num);

  if (!defined $status) {
    die "must be in a trunk or in a checkout of ticket #$real_tick_num to use this option\n";
  }

  warn "update working copy\n";
  my $up_command = "$SVN switch $TRUNK";
  my $up_res = system $up_command;
  if ($up_res != 0) {
    process_failure($up_command);
  }

  if ($status->{type} ne 'trunk') {
    warn "switching to trunk\n";
    my $switch_command = "$SVN switch $TRUNK";
    my $switch_res = system $switch_command;
    if ($switch_res != 0) {
      process_failure($switch_command);
    }
  }

  warn "merging $tick_branch into trunk\n";
  my $merge_cmd = "$SVN merge --reintegrate $tick_branch .";
  my $res = system $merge_cmd;

  if ($res != 0) {
    process_failure($merge_cmd);
  } else {
    my $message = "Merge of ticket branch into trunk. Refs #$real_tick_num.";
    print "merge successful, checking in\n";
    my $checkin_cmd = "$SVN commit -m '$message' .";
    my $checkin_res = system $checkin_cmd;
    if ($checkin_res != 0) {
      process_failure($checkin_cmd);
    } else {
      print "check-in successful, removing branch for $tick_branch\n";
      my $remove_branch_cmd = "$SVN rm -m 'Removed branch for #$real_tick_num' $tick_branch";
      my $remove_res = system $remove_branch_cmd;
      if ($remove_res != 0) {
        process_failure($remove_branch_cmd);
      }
    }
  }
}

sub get_last_checkin_user
{
  my $branch = shift;

  my $user = undef;

  open SVNLOG, "svn log --limit 1 $branch|" or die "can't open pipe to svn: $!";
  while (my $line = <SVNLOG>) {
    if ($line =~ /^r\d+ \| (.*?) \| /) {
      $user = $1;
    }
  }
  close SVNLOG;

  if (defined $user) {
    return $user;
  } else {
    "<unknown>";
  }
}

sub get_list_by_type
{
  my $type = shift;
  my %tmap = (tag => 'tags', branch => 'branches', ticket => 'tickets');
  my @ret_list = ();

  my $prefix = "$REPO/" . $tmap{$type};

  if (branch_exists($prefix)) {
    open SVN, "svn ls $prefix|" or die "can't open pipe to svn: $!";
    while (my $line = <SVN>) {
      if ($line =~ m!^(.*?)/?$!) {
        my $branch = "$prefix/$1/";
        my $last_checkin_user = get_last_checkin_user($branch);
        push @ret_list, {
                         type => $type, name => $1, url => $branch,
                         user => $last_checkin_user
                        };
      }
    }
    close SVN;
  }

  return @ret_list;
}

sub get_list
{
  return (get_list_by_type('ticket'),
          ($verbose ? (get_list_by_type('branch'), get_list_by_type('tag')) : ()));
}

if ($list) {
  my @br_list = get_list();
  if (@br_list) {
    for my $ref (@br_list) {
      printf "%-8.8s %-11.11s %s\n", $ref->{type}, $ref->{user}, $ref->{name};
    }
  } else {
    die "no branches found\n";
  }
}

if ($move_to_trunk) {
  check_for_changes('.');

  my @status = get_status('.');

  if (@status) {
    my $path = $TRUNK;

    if ($status[0]->{subdir}) {
      $path .= '/' . $status[0]->{subdir};
    }

    warn "switching to trunk\n";
    system "$SVN switch $path";
  } else {
    usage "not a ticket, branch, tag or trunk checkout";
  }
}

sub maybe_push
{
  my $arr_ref = shift;
  my $value = shift;

  if (@$arr_ref) {
    my $top = $arr_ref->[-1];

    if ($top->{type} ne $value->{type} or $top->{name} ne $value->{name}) {
      push @$arr_ref, $value;
    }
  } else {
    push @$arr_ref, $value;
  }
}

sub get_short_branch
{
  my $branch = shift;

  $branch =~ s/$REPO/\$REPO/;

  return $branch;
}

sub check_for_changes
{
  my $dir = shift;

  if (!$force && has_local_changes($dir)) {
    die "$0: aborting because check out has local changes, use -f option to force the action\n";
  }
}

sub has_local_changes
{
  my $status_dir = abs_path(shift);

  my $local_changes = 0;
  open SVN, "svn status $status_dir|" or die "can't open pipe to svn: $!";
  while (my $line = <SVN>) {
    if ($line =~ /^[MCA]/) {
      $local_changes = 1;
    }
  }
  close SVN;
  return $local_changes;
}

sub get_status
{
  my $status_dir = abs_path(shift);

  my $login = getlogin();

  my @retval;

 DIR:
  while ($status_dir ne '/' and -d "$status_dir/.svn") {
    open SVN, "svn info $status_dir|" or die "can't open pipe to svn: $!";
    while (my $line = <SVN>) {
      if ($line =~ m!URL: (.*?)/*$!) {
        my $url = $1;
        if ($url =~ m!^$TRUNK(?:|/(.*))$!) {
          maybe_push \@retval, { type => 'trunk', name => "trunk", subdir => $1, url => $url };
        } else {
          if ($url =~ m!/tickets/ticket-(\d+)(?:|/(.*))$!) {
            maybe_push \@retval, { type => 'ticket', name => $1, subdir => $2, url => $url };
          } else {
            if ($url =~ m!$REPO/(tag|branch)(?:s|es)/((?:$login/)?.*?)(?:|/(.*))$!) {
              maybe_push \@retval, { type => $1, name => $2, subdir => $3, url => $url };
            } else {
              last DIR;
            }
          }
        }
      }
    }
    close SVN;
    $status_dir = dirname($status_dir);
  }

  return @retval;
}

if ($get_status) {
  if (@ARGV == 0 or $ARGV[0] !~ /^\d+$/ and -d $ARGV[0]) {
    my $status_dir;
    if (@ARGV == 0) {
      $status_dir = '.';
    } else {
      $status_dir = $ARGV[0];
    }

    if (-d "$status_dir/.svn") {
      my @status = get_status($status_dir);

      if (@status) {
        for my $status (@status) {
          if ($status->{type} eq 'trunk') {
            if (defined $status->{subdir}) {
              print "$status->{subdir} is part of a trunk checkout\n";
            } else {
              print "top level is a trunk checkout\n";
            }
          } else {
            if ($status->{type} eq 'ticket') {
              if (defined $status->{subdir}) {
                print $status->{subdir}, " is part of a ticket checkout of #", $status->{name}, "\n";
              } else {
                print "top level is part of a ticket checkout of #", $status->{name}, "\n";
              }
            } else {
              if ($status->{type} eq 'branch' or $status->{type} eq 'tag') {
                if (defined $status->{subdir}) {
                  print $status->{subdir}, " is part of a checkout of ", $status->{type}, " ",
                        $status->{name}, "\n";
                } else {
                  print "top level is a checkout of ", $status->{type}," ", $status->{name}, "\n";
                }
              }
            }
          }
        }
        exit 0;
      } else {
        warn "$status_dir isn't a trunk or ticket branch check out\n\n";

        system "$SVN info .";

        exit 1;
      }
    } else {
      usage("no ticket number given and $status_dir is not a checkout");
    }
  }

  my ($type, $branch) = get_branch_name($arg);

  if (branch_exists($branch)) {
    my $short_branch = get_short_branch($branch);

    if ($type eq 'ticket') {
      print "branch exists for ticket #$arg: $short_branch\n";
    } else {
      print "branch $arg exists: $short_branch\n";
    }
  } else {
    if ($type eq 'ticket') {
      print "no branch for ticket #$arg\n";
    } else {
      print "no branch $arg\n";
    }
  }
}
