#!/usr/bin/perl

=head1 SYNOPSIS

    get_biogrid /path/to/data/directory

=head1 SUMMARY

Download files from ftp://ftp.flybase.net/releases/current/precomputed_files/ontologies/

=over

=item * fly_development.obo.zip
=item * flybase_controlled_vocabulary.obo.zip
=item * fly_anatomy.obo.zip

=back

Extract them, and place them in:

=over

=item * data_dir/ontologies/fly-development/$date
=item * data_dir/ontologies/fly-cv/$date
=item * data_dir/ontologies/fly-anatomy/$date

=back

=cut

use strict;
use warnings;
use Net::FTP;
use Path::Class;
use File::Temp;
use DateTime;

@ARGV == 1 or die "Expected one argument: data_directory\nusage:\t$0 data_dir\n";

my $data_dir = dir($ARGV[0]);

my %get_these = (
    "fly_development.obo.zip" => "fly_development",
    "flybase_controlled_vocabulary.obo.zip" => "fly-cv",
    "fly_anatomy.obo.zip" => "fly-anatomy",
);

my $base_dir = "ontologies";

my $host = "ftp.flybase.net";
my $dir  = "releases/current/precomputed_files/ontologies";


while (my ($file_to_download, $source_name) = each %get_these) {
    my $ftp = Net::FTP->new($host, Passive => 1) 
        or die "Cannot connect to host, $@";

    $ftp->login() or $ftp->close and die "Cannot login ", $ftp->message;
    $ftp->binary;

    $ftp->cwd($dir)
        or $ftp->close and die "Cannot read directory $dir", $ftp->message;
    my $tmp = File::Temp->new(SUFFIX => '.zip');
    my $version = DateTime->from_epoch(epoch => $ftp->mdtm($file_to_download))->ymd;

    my $source_dir = $data_dir->subdir($base_dir, $source_name);

    warn "[INFO]\tDownloading $source_name data (version $version) to $source_dir\n";
    
    unless (-d "$source_dir") {
        die "File exists at $source_dir - cannot use this as a directory" if -e "$source_dir";
        $source_dir->mkpath() 
            or $ftp->close and die "Could not create source directory: $source_dir";
    }

    my $version_dir = $source_dir->subdir($version);
    if (-d "$version_dir") {
        warn "[INFO]\t$version_dir exists and is not empty - skipping\n" if ($version_dir->children);
        $ftp->close and next;
    } else {
        $version_dir->mkpath() or 
            $ftp->close and die "Could not create version directory: $version_dir";
    }

    $ftp->get($file_to_download, "$tmp")
        or die "Get failed for $file_to_download", $ftp->message;
    $ftp->close;

    open(my $pipe, '-|', 'unzip', "$tmp", '-d', "$version_dir") 
        or die "Could not open unzip, $!";
    while (<$pipe>) {
        print STDERR "[unzip]\t", $_;
    }
    close $pipe or die "[ERROR]\tCould not close unzip process";

    my $current_dir = $source_dir->subdir("current");

    $current_dir->remove if (-e "$current_dir");

    symlink("$version_dir" => "$current_dir") 
        or die "[ERROR]\tCould not make symlink $version_dir => $current_dir";

    warn "[INFO]\tNew $source_name data available in $current_dir for version $version\n";
}

exit;
