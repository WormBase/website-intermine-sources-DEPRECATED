#!/usr/bin/perl

# script to download PSI data from IntAct to ./psi/intact/release_date
use strict;
use warnings;

BEGIN {
  # find the lib directory by looking at the path to this script
  push (@INC, ($0 =~ m:(.*)/.*:)[0] . '/../../intermine/perl/lib/');
}
use InterMine::DataDownloader;

#Define ARGVs
my ($logdir,$logname,$home,$file);
if(@ARGV!=4){
#	die "Wrong number of ARGVs!\nget_all.sh should supply the log directory, temporary log name, /shared/data/ and config file.\n";

 $logdir="/shared/data/download_logs/";
 $logname="temp_log.txt"; 
 $home="/shared/data";
 $file="./resources/get_scripts.config";

}else{
	$logdir = $ARGV[0];
	$logname= $ARGV[1];
	$home = $ARGV[2];
	$file = $ARGV[3];
}

# EBI ftp server information
my $ebi_server = "ftp.ebi.ac.uk";
my $intact_dir = "pub/databases/intact/current/";
my $species_dir = "psi25/species";
my $username = "anonymous";
my $password = "-anonymous\@";

# get the list of organisms from the config file - this is the five letter
# abbreviation used as the start of intact filenames. 
my @organisms = &get_organisms($file,"intact");

#### Access EBI ftp server
my $connection = &ftp_connect($ebi_server,$username,$password);

$connection->cwd($intact_dir)
	or die "Cannot change working directory to $intact_dir", $connection->message;

#use the date stamp of a file in the $intact_dir to create a version id 
#for the output directory
my $check_file = "all.zip";
my $date_string = &date_string_file($connection,$check_file);

# check psi and intact directory exists
my $psi_dir = "$home/psi";
my $intact_main_dir = "$psi_dir/intact";
my $download_dir = "$intact_main_dir/$date_string";

&checkdir_exists($psi_dir);
&checkdir_exists($intact_main_dir);
my $log_buffer;

#if download dir doesn't exist, create it and download data
if(&checkdir_exists($download_dir)==1){
	$connection->cwd($species_dir)
 	   or die "Cannot change working directory to $species_dir";
	
	$log_buffer = "Intact\nNew data available in $download_dir containing file(s):\n";
	my $int_version_buffer = "Protein Interactions - D. melanogaster, C. elegans, S. cerevisiae protein-protein interactions\n$date_string\nAll protein-protein interaction data from IntAct . See Protein Interactions aspect to retrieve full list of publcationsProtein interaction database\nhttp://www.ebi.ac.uk/intact";
	
	#get the list of files in /psi25/species
	my @psi_files = $connection->ls();

	for my $psi_file (@psi_files) {
            #find what organism the file represents and check if we are interested in it
            
	    my $start = substr($psi_file, 0, index($psi_file, "_"));
            if (grep {$start eq $_} @organisms) {
                &ftp_download($connection,$download_dir,$psi_file);
                $log_buffer .= "$psi_file\n";
	    }             
	}
	
	my $current_link = "$home/psi/intact/current";
	&make_link($date_string,$current_link);
	&write_version($intact_main_dir,$int_version_buffer);
	system "chmod -R a+r,g+w $download_dir";
}else{ 
	warn " current version up to date - skipping download\n";
	$log_buffer = "Intact\nCurrent data ok\n";
}

$connection->quit;

#================================================================================
#download psi-mi.obo from http://obo.cvs.sourceforge.net/obo/obo/ontology/genomic-proteomic/protein/
#to /shared/data/psi/ontology/

my $psi_mi_server = "http://obo.cvs.sourceforge.net/*checkout*/obo/obo/ontology/genomic-proteomic/protein";
my $psi_mi_file = "psi-mi.obo";

my $psi_mi_main_dir = "$psi_dir/ontology";
my $psi_mi_download_dir = "$psi_dir/ontology/temp";
my $file_to_get = "$psi_mi_server/$psi_mi_file";
my $temp_file = "$psi_mi_download_dir/$psi_mi_file";

&checkdir_exists($psi_mi_main_dir);
&checkdir_exists($psi_mi_download_dir);
&http_download($file_to_get,$temp_file);

my $current_link = "$home/psi/ontology/current";
my $old_file = "$current_link/psi-mi.obo";

#compare the files, create version directory if it is a new version or
#the current data link is missing
my $result = &compare_files($old_file,$temp_file);
if($result == 1){
	print "Keeping downloaded files.\n";
	&update_files($psi_mi_main_dir,$psi_mi_file,$temp_file,$current_link);
}elsif($result == 0 ){
	print "Downloaded files deleted.\n";
	unlink $temp_file;
	$log_buffer .= "\npsi-mi.obo\nCurrent data ok\n\n";
}

&write_log($log_buffer,$logdir,$logname);

#create data directory, move files, make link	
sub update_files(){
	my ($dir,$new_name,$oldfile,$link) = @_;
	my $date = &convert_date();
	my $new_dir = "$dir/$date";
	my $newfile = "$new_dir/$new_name";
	&checkdir_exists($new_dir);
	rename($oldfile, $newfile) or die "Cannot rename $oldfile: $!";
	&make_link($date,$link);
	
	$log_buffer .= "\npsi-mi.obo\nNew data available in $new_dir containing file $new_name\n\n"; 
	my $ont_version_buffer = "psi-mi.obo\n$date\nA structured controlled vocabulary for the annotation of experiments concerned with protein-protein interactions.\nhttp://obofoundry.org/cgi-bin/detail.cgi?id=psi-mi&title=Protein-protein%20interaction";
	&write_version($dir,$ont_version_buffer);
	system "chmod -R a+r,g+w $new_dir";
}	

# TODO use the method in DataDownloader.pm instead
sub get_organisms(){
    my ($file,$trigger) = @_;
    my @organisms;

    open(F,"<$file") or die "$!";
    while(<F>){
        my @f = split/\t/;
        if($f[0] =~ /^$trigger/g) {
            chomp $f[1];
            push(@organisms, $f[1]); 
        }
    }
    close(F) or die "$!";
    return @organisms;
}















