#!/usr/bin/perl

# script to download the latest uniprot release into a directory like uniprot/5.3
# the version number is extracted from the relnotes.txt file on the FTP server
# the script should be run in svn/data/bio/scripts/

use strict;
use warnings;

BEGIN {
  # find the lib directory by looking at the path to this script
  push (@INC, ($0 =~ m:(.*)/.*:)[0] . '/../../intermine/perl/lib/');
}
use InterMine::DataDownloader;

#Define ARGVs
my ($logdir,$logname,$home,$config_file);

$logdir="/micklem/data/download_logs/";
my $tempname="temp_log.txt";
my $shared_data="/micklem/data";
$config_file="./resources/get_scripts.config";

if (@ARGV!=4) {
  #die "Wrong number of ARGVs!\nget_all.sh should supply the log directory, temporary log name, /shared/data/ and config file.\n";
  	warn "no arguments passed, using default values\n";
	$logname = $tempname;
	$home = $shared_data;
} else {
  $logdir = $ARGV[0];
  $logname= $ARGV[1];
  $home = $ARGV[2];
  $config_file = $ARGV[3];
}

#data source
my $uniprot_address = "ftp.uniprot.org";
my $username = "anonymous";
my $password = "-anonymous\@";
my $uniprot_base_path = "pub/databases/uniprot/current_release";
my $uniprot_full_path = "$uniprot_base_path/knowledgebase/complete";
my $release_notes_file = "relnotes.txt";
my $uniprot_main_dir = "$home/uniprot";
my @files_to_get = qw(
                      uniprot.xsd uniprot_sprot.xml.gz uniprot_trembl.xml.gz uniprot_sprot_varsplic.fasta.gz
                     );
my $keywords_file = "keywlist.xml.gz";

&checkdir_exists($uniprot_main_dir);

#### Access ftp server
my $connection = &ftp_connect($uniprot_address,$username,$password);

$connection->cwd($uniprot_base_path)
or die "Cannot change to $uniprot_base_path", $connection->message;

#download the release notes file
my $local_release_notes_copy = "$uniprot_main_dir/$release_notes_file";
&ftp_download($connection,$uniprot_main_dir,$release_notes_file);

#get the uniprot version from the release notes file
my $version;
open F, $local_release_notes_copy
or die "can't open local copy of relnotes.txt: $local_release_notes_copy\n";
while (my $line = <F>) {
  if ($line =~ /UniProt.*Release (\S+)/) {
    #print "$line\n";
    $version = $1;
  }
}
close F;

if (!defined $version) {
  die "can't find version number in release notes\n";
} else {
  print "Version $version found\n";
}

unlink $local_release_notes_copy;

my ($version_buffer,$log_buffer);
#if there is a new release, download and unzip it, update the current link
my $download_dir = "$uniprot_main_dir/$version";
if (&checkdir_exists($download_dir)==1) {
  $connection->cwd("/$uniprot_full_path")
  or die "Cannot change working directory to $uniprot_full_path", $connection->message;

  my $date = &convert_date();
  $log_buffer = "Uniprot\nNew data available (release $version) in $download_dir containing file(s):\n";
  $version_buffer = "UniProt proteins\nRelease $version $date\nProteins for D. melanogaster, D. pseudoobscura, A. gambiae, A. mellifera, C. elegans and S. cerevisiae  from Uniprot (trembl and swissprot)\nhttp://www.ebi.uniprot.org/index.shtml\n";

  for my $file_to_get (@files_to_get) {
    &ftp_download($connection,$download_dir,$file_to_get);
    $log_buffer .= "$file_to_get\n";
  }

  #download keydefs.xml
  if ($connection->cwd("/$uniprot_full_path/docs")) {
	  &ftp_download($connection,$download_dir,$keywords_file);
	  &unzip_dir($download_dir);
     $log_buffer .= "keydefs.xml\n\n";
  } else {
  	  my $msg = "\n\n ERROR!  Failed to retrieve keydefs.xml.\n";
     warn $msg;
	  $log_buffer .= $msg;
  }

  &write_version($uniprot_main_dir,$version_buffer);

  my $uniprot_link = "$home/uniprot/current";
  &make_link($version,$uniprot_link);
} else {
  warn " current version up to date - skipping download\n";
  $log_buffer = "Uniprot\nCurrent data ok\n\n";
}

&write_log($log_buffer,$logdir,$logname);
$connection->quit;

#============================================================================

#splits the uniprot xml files into separate files based on the ncbi taxon id. Reads the taxons of interest from a
#centrally stored file.

my($start, $end, $buffer) = ("<entry", "</entry>", '');
my ($filename, $fname_end);
my ($keep, $taxon) = ("false", '0000');
my (@new_contents, @old_contents);

#the xml declaration and root element for each output file
my $prolog = '<?xml version="1.0" encoding="UTF-8"?>
<uniprot xmlns="http://uniprot.org/uniprot"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://uniprot.org/uniprot http://www.uniprot.org/support/docs/uniprot.xsd">';
#define the last elements for each output file
my $element_end = '<copyright>
Copyrighted by the UniProt Consortium, see http://www.uniprot.org/terms
Distributed under the Creative Commons Attribution-NoDerivs License
</copyright>
</uniprot>';

my $split_dir = "$home/uniprot/$version/split/";
if (&checkdir_exists($split_dir)==0) {
  warn "Data already split.\n";
} else {
  print "Splitting files by taxon Id\n";
  #use hash to define output name for each source file
  #comment out one of them to process the other file only
  my %files = (
               'sprot'  => {    'filename' => "$download_dir/uniprot_sprot.xml",
                                'fname_end' => '_uniprot_sprot.xml'},
               'trembl'  => { 'filename' => "$download_dir/uniprot_trembl.xml",
                              'fname_end' => '_uniprot_trembl.xml'},
              );
  #open file to get taxonIDs from the config file
  my %taxons = &config_species($config_file,"uniprot");
  
  # set to 1 while we are inside an <organism>...</organism>
  my $in_organism = 0;

  #open each uniprot file
  foreach my $file_type (sort keys %files) {
    $filename = $files{$file_type}->{'filename'};
    $fname_end = $files{$file_type}->{'fname_end'};

    #read a line at a time and identify the start (<entry), stop (</entry), and taxon id (type="NCBI Taxonomy)
    open(F,"<$filename") or die "$! was expecting something like uniprot_sprot.xml or uniprot_trembl.xml";
    while (my $newline = <F>) {
      #if a new entry is found we might want to keep it
      if ($newline =~ /<organism(\s)/ || $newline =~ /<organism>/) {
        $in_organism = 1;
      } elsif ($newline =~ /<\/organism>/) {
        $in_organism = 0;
      } elsif ($newline =~ /$start/gi) {
        $keep = "true";
        #is this a taxon Id line?
      } elsif ($newline && $in_organism && 
               $newline=~/dbReference/ && $newline=~/type="NCBI Taxonomy"/ && $newline=~/id="(\d+)"/) {
        #get the taxon Id only if we are in an <organism>...</organism> to avoid <organismHost>
        $taxon = $1;
        #is this the end of the entry?
      } elsif ($newline && $newline =~ /$end/gi) {
        #add to the buffer
        $buffer .= $newline;
        #if we want this species, write the buffer to a file
        if (exists $taxons{$taxon}) {
          &writefile($buffer,$taxon,$fname_end);
        }
        #reset everything ready for the next entry element.
        $keep = "false";
        $buffer = "";
        $taxon = 0000;
      }
      #while keep is true, build up the buffer until the element end is found
      if ($keep eq "true") {
        $buffer .= $newline;
      }
    }
    close(F) or die "$!";
  }

  #identify all the output files once the XML processing is finished
  opendir(DIR,$split_dir) || die("Cannot open directory !\n");
  @new_contents=grep(!/^\.\.?$/,readdir DIR);
  closedir(DIR);

  #add the copyright and close the root element for each output file
  foreach my $file (@new_contents) {
    $file = $split_dir.$file;
    open( FILE, ">>$file") or die "cannot open $file: $!";
    print FILE "$element_end";
    close(FILE);
  }
  system "chmod -R a+r,g+w $download_dir";
}

#creates files and adds elements as appropriate
sub writefile(){
  my ($xml,$species,$end) = @_;
  my $new_file = $split_dir.$species.$end;

  #if this is a new species file, create it and add the
  #xml declaration, open the root element and the species entry
  if (!-e $new_file ) {
    open(FH, ">$new_file") || die "$!";
    print FH "$prolog\n";
    print FH "$xml";
    close(FH);
  } else {
    #if the file already exists, append the species entry
    open(FH, ">>$new_file") || die "$!";
    print FH "$xml";
    close(FH);
  }
}
