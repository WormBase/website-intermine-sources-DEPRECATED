#!/usr/bin/perl

use warnings;
use strict;

use InterMine::Model;
use InterMine::Item::Document;

if ( @ARGV != 4 ) {
    die "usage: $0 model_file kegg_map_title_file kegg_gene_map out_file\n";
}

my ( $model_file, $map_title_filename, $gene_map_filename, $out_file ) = @ARGV;

my $data_source = 'Kegg';
my $taxon_id    = 36329;

# The item factory needs the model so that it can check that new objects have
# valid classnames and fields
my $model = InterMine::Model->new( file => $model_file, );
my $document = InterMine::Item::Document->new(
    model  => $model,
    output => $out_file,
);

my $datasource_item =
  $document->add_item( 'DataSource', name => $data_source, );
my $dataset_item = $document->add_item(
    'DataSet',
    name       => $data_source . ' data set for taxon id: ' . $taxon_id,
    dataSource => $datasource_item,
);
my $org_item = $document->add_item(
    'Organism',
    taxonId => $taxon_id,
);

# read the map title file into %pathways
my %pathway_with;

open( my $input, '<', $map_title_filename )
  or die "Could not open $map_title_filename for reading, $!";

while (<$input>) {
    chomp;
    my ( $id, $title ) = split(/\t/);
    my $item = $document->add_item(
        'Pathway',
        identifier => $id,
        name       => $title,
    );
    $pathway_with{$id} = $item;
}
close($input) or die "Could not close $map_title_filename, $!";

# read the gene map file and create gene objects

open( $input, '<', $gene_map_filename )
  or die "Could not open $gene_map_filename for reading, $!";

while (<$input>) {
    chomp;
    my ( $id, $pathways ) = split(/\t/);

    my @pathway_items = @pathway_with{ split( /\s/, $pathways ) };

    my $item = $document->add_item(
        'Gene',
        primaryIdentifier => $id,
        organism          => $org_item,
        pathways          => [@pathway_items],
        dataSets          => [$dataset_item],
    );
}
close($input) or die "Could not close $gene_map_filename, $!";

# write the items
$document->write();
