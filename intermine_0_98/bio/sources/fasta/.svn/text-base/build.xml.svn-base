<!--
  a bit of an odd source as it writes straight to the production database
  and deals with model objects (and therefore the "main" sub-project depends on
  the production model).
-->
<project name="fasta" default="default" basedir=".">
  <description>build, test, package fasta</description>
  
  <import file="../../../imbuild/source.xml"/>
  
  <!-- no retrieve -->
  <target name="retrieve"/>
  
  <target name="-init-suffix" unless="fasta.idSuffix">
    <!-- set the default -->
    <property name="fasta.idSuffix" value=""/>
  </target>

  <target name="-init-attribute" unless="fasta.classAttribute">
    <!-- set the default -->
    <property name="fasta.classAttribute" value="primaryIdentifier"/>
  </target>
 
  <target name="-init-loader-classname" unless="fasta.loaderClassName">
    <!-- set the default -->
    <property name="fasta.loaderClassName"
              value="org.intermine.bio.dataconversion.FastaLoaderTask"/>
  </target>

  <!-- NOTE: we can do this with dynamic properties -->
  <target name="load" depends="-init-suffix, -init-attribute, -init-loader-classname, init, -init-deps">
    <taskdef name="read-fasta"
      classname="${fasta.loaderClassName}"
      classpathref="task.class.path"/>
    <read-fasta integrationWriterAlias="integration.production"
                sourceName="${source.name}"
                sourceType="${source.type}"
                idSuffix="${fasta.idSuffix}"
                className="${fasta.className}"
                classAttribute="${fasta.classAttribute}"
                dataSetTitle="${fasta.dataSetTitle}"
                dataSourceName="${fasta.dataSourceName}"
                sequenceType="${fasta.sequenceType}"
                fastaTaxonId="${fasta.taxonId}">
      <fileset dir="${src.data.dir}" includes="${fasta.includes}"/>
    </read-fasta>
  </target>
  
</project>

