    ----
    Intermine Model Viewer
    ----
    ----

Introduction

    This project contains the artifact for the Intermine Installer.

The Model Viewer

* Reading and Writing XML Files

    I have created XML schemas (XSD documents) for the core file, the additions
files and the project file. From these schemas,
{{{http://java.sun.com/developer/technicalArticles/WebServices/jaxb/}JAXB}} is used
to generate Java classes and perform automatic marshalling and unmarshalling from
the XML documents.

    Unfortunately for this project, JAXB is quite exacting and I could not get
it to happily handle correctly prefixed files (with schema locations and namespaces)
and the more ad-hoc XML files typically seen with Intermine. This being the case,
simple SAX
{{{http://java.sun.com/javase/6/docs/api/org/xml/sax/ContentHandler.html}ContentHandler}}s
have been implemented that are very forgiving. Obviously the down side of this is that
if the schema changes, these handlers will need to be manually rewritten.

    JAXB is used for writing all of the files, so any files saved from Java will
be correctly formatted with the appropriate schema references.


* Graph Display

    The display of the class hierarchy is created using the JGraphX library from JGraph
{{{http://jgraph.com/jgraph.html}http://jgraph.com/}}. This is a third party library
released under a BSD license.

    Unfortunately, this is the one library not in public Maven repositories. To aid
development, the <<<jgraphx>>> directory contains binary and source JAR files for
JGraphX. In this directory there is also a shell script, <<<install>>>, that will put
these files into your local Maven repository. This only needs to be done once.

* Model Assembly

    Models are assembled starting from a <<<project.xml>>> file. Addition files are
found from properties in the <<<project.properties>>> file under the <<<dbmodel>>>
directory for the mine.

    The process loads the <<<core.xml>>> file from Intermine's <<<bio/core>>> directory.
Additions are made from this model by reading the files listed in the
<<<project.properties>>> file by the <extra.model.paths.start> and
<extra.model.paths.end> properties. Further additions are added by reading the additions
files for each source in the <<<project.xml>>> file.

    Briefly, as each file is read the classes it contains are checked against those
in the model so far. Classes not already present are created, otherwise attributes and
references are added to the class already there. At each point, every class, attribute
and reference is tagged with a string indicating which file the feature came from.

** Key Classes

    The main class used to read a model is <<<ProjectLoader>>>. The <<<loadProject>>> method
will load and parse a project file, resulting in a <<<Project>>> object structure. This
can then be used in the call to the <<<loadModel>>> method to read class information from
the files of each of the sources in the project. <<<ProjectLoader>>> uses the
<<<ModelBuilder>>> class to load and parse the data files and to assemble the resulting
objects into a coherent model class hierarchy.  


* Packaging

    Besides the regular Maven artifact packaging, the
{{{http://maven.apache.org/plugins/maven-assembly-plugin/}assembly plugin}}
is used to create an uber-JAR with all the dependencies that can be run with

----
    java -jar modelviewer-1.0-SNAPSHOT-jar-with-dependencies.jar
----
