// $ANTLR 2.7.6 (20060327): "intermine_sql.g" -> "SqlLexer.java"$

package org.intermine.sql.query;

public interface SqlTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int SQL_STATEMENT = 4;
	int SELECT_LIST = 5;
	int FROM_LIST = 6;
	int WHERE_CLAUSE = 7;
	int GROUP_CLAUSE = 8;
	int HAVING_CLAUSE = 9;
	int ORDER_CLAUSE = 10;
	int LIMIT_CLAUSE = 11;
	int SELECT_VALUE = 12;
	int TABLE_ALIAS = 13;
	int FIELD_ALIAS = 14;
	int TABLE = 15;
	int TABLE_NAME = 16;
	int SUBQUERY = 17;
	int CONSTANT = 18;
	int FIELD = 19;
	int FIELD_NAME = 20;
	int SAFE_FUNCTION = 21;
	int UNSAFE_FUNCTION = 22;
	int CONSTRAINT = 23;
	int NULL_CONSTRAINT = 24;
	int NOT_CONSTRAINT = 25;
	int AND_CONSTRAINT_SET = 26;
	int OR_CONSTRAINT_SET = 27;
	int SUBQUERY_CONSTRAINT = 28;
	int INLIST_CONSTRAINT = 29;
	int ORDER_DESC = 30;
	int BIOSEG_CONSTRAINT = 31;
	int LITERAL_explain = 32;
	int LITERAL_distinct = 33;
	int INTEGER = 34;
	int ALIAS = 35;
	int IDENTIFIER = 36;
	int QUOTED_STRING = 37;
	int ESCAPED_STRING = 38;
	int FLOAT = 39;
	int LITERAL_true = 40;
	int LITERAL_false = 41;
	int LITERAL_null = 42;
	int TYPECAST = 43;
	int LITERAL_boolean = 44;
	int LITERAL_real = 45;
	int LITERAL_double = 46;
	int LITERAL_smallint = 47;
	int LITERAL_integer = 48;
	int LITERAL_bigint = 49;
	int LITERAL_numeric = 50;
	int LITERAL_text = 51;
	int LITERAL_count = 52;
	int LITERAL_max = 53;
	int LITERAL_min = 54;
	int LITERAL_sum = 55;
	int LITERAL_avg = 56;
	int LITERAL_lower = 57;
	int LITERAL_upper = 58;
	int LITERAL_strpos = 59;
	int LITERAL_substr = 60;
	int LITERAL_coalesce = 61;
	int LITERAL_stddev = 62;
	int PLUS = 63;
	int PERCENT = 64;
	int ASTERISK = 65;
	int DIVIDE = 66;
	int POWER = 67;
	int MINUS = 68;
	int NOT_EQ = 69;
	int GE = 70;
	int LE = 71;
	int GT = 72;
	int LITERAL_not = 73;
	int LITERAL_like = 74;
	int EQ = 75;
	int LT = 76;
	int GORNULL = 77;
	int SEMI = 78;
	int LITERAL_union = 79;
	int LITERAL_select = 80;
	int LITERAL_all = 81;
	int COMMA = 82;
	int LITERAL_from = 83;
	int LITERAL_where = 84;
	int LITERAL_group = 85;
	int LITERAL_by = 86;
	int LITERAL_having = 87;
	int LITERAL_order = 88;
	int LITERAL_limit = 89;
	int LITERAL_offset = 90;
	int LITERAL_as = 91;
	int LITERAL_desc = 92;
	int OPEN_PAREN = 93;
	int CLOSE_PAREN = 94;
	int DOT = 95;
	int COLONTYPE = 96;
	int LITERAL_precision = 97;
	int LITERAL_or = 98;
	int LITERAL_is = 99;
	int LITERAL_bioseg_create = 100;
	int OVERLAP = 101;
	int INSIDE = 102;
	int SURROUND = 103;
	int LITERAL_and = 104;
	int LITERAL_in = 105;
	int AT_SIGN = 106;
	int VERTBAR = 107;
	int WS = 108;
}
