#!/usr/bin/perl

use strict;
use warnings;
use Webservice::InterMine;
use List::Util qw(max);

my $validator;
eval "require Email::Valid";
if ($@) {  # just assume it's valid
    $validator  = sub { 1 };
} else {  # actually validate it
    $validator = Email::Valid->can("address");
}

sub usage {
    my $message = 
qq{$0: Compare templates from two versions of the same webservice

usage: $0 "www.flymine.org/query/service" "beta.flymine.org/beta/service" "email\@to.send.results.to" "email\@to.set.as.reply.to"

OR 

usage: $0 "www.flymine.org/query/service" "beta.flymine.org/beta/service" "email\@to.use.as.to.and.from"

OR

usage: $0 "www.flymine.org/query/service" "email\@to.use.as.to.and.from"

};
    die $message;
}

usage() unless (@ARGV == 4 or @ARGV == 3 or @ARGV == 2);

my @urls = (@ARGV > 2) ? @ARGV[0, 1] : @ARGV[0, 0] ;
my $to   = (@ARGV == 4) ? $ARGV[-2] : $ARGV[-1];
my $from = $ARGV[-1];

for ($to, $from) {
    usage() unless ($validator->("Email::Valid", $_));
}
print "Starting template comparison test at " . qx/date/;
my $start = time;
my $sendmail = qx/which sendmail/;
die "we need sendmail to send the results email with I'm afraid"
    unless $sendmail;
$sendmail =~ s/\n?$/ -t\n/; # add on the -t flag
my $reply_to = "Reply-to: $from\n";
my $send_to  = "To: $to\n";
my (%rows_from, %failure_from);
my $char = "A";
my %services = map {
    (Webservice::InterMine->get_service($_)->release() . $char++ 
        => Webservice::InterMine->get_service($_))} @urls;

# Get the results, and store them by template name and service
while (my ($release, $service) = each %services) {
    for ($service->get_templates) {
        printf "Querying %s for results for %s\n",
            $service->release,
            $_->name;
        my $count = eval{ $_->get_count };
        if (my $e = $@) {
            $failure_from{$_->name}{$release} = $e;
        }
        if (defined $count) {
            $rows_from{$_->name}{$release} = $count;
        }
    }
}
my $end = time;
my $total_time = $end - $start;
printf "Finished fetching results: that took %.0f min\n",
    ($total_time / 60);
print "Now sending email with analysis of results to $to\n";

my $longest_template_name = max(map(length, keys %rows_from));
my $longest_failure_name = max(map(length, keys %failure_from));
my @services = keys %services;
my (%only_in, %in_both);
my $icmp = sub {lc($a) cmp lc($b)}; 
# Write an output line, and store it in one of two data structures
for my $template (sort($icmp keys %rows_from)) {
    my @res = map {$rows_from{$template}{$_}} @services;
    if (grep(defined, @res) == 2) {
        my ($x, $y) = sort {$b <=> $a} @res;       
        my $diff = 0;
        if ($x != $y) {
            $diff = 100.0 * abs($x - $y) / $x;
        }
        my $group = ($diff >= 10) ? 'high' : 'low';
        my $line = sprintf(
            "%*s release-%s: %7d, release-%s: %7d, diff: %3.0f%%", 
            (0 - $longest_template_name), # neg for left justification
            $template, 
            $services[0], $res[0], 
            $services[1], $res[1], 
            $diff);
        push @{$in_both{$group}}, $line;
    } else {
        my ($res) = grep {defined} @res;
        my ($service) = keys %{$rows_from{$template}};
        my $line = sprintf(
            "%*s %7d",
            (0 - $longest_template_name), # neg for left justification
            $template, 
            $res
        );
        push @{$only_in{$service}}, $line;
    }
}
my %failures_in;
for my $failure (sort($icmp keys %failure_from)) {
    my @errs = map {$failure_from{$failure}{$_}} @services;
    my $c = 0;
    for (@errs) {
        if (defined) {
            my $line = sprintf(
                "%*s - %s",
                (0 - $longest_failure_name),
                $failure,
                $_);
            push @{$failures_in{$services[$c]}}, $line;
        }
        $c++;
    }
}


# email the data structures

my $subject  = sprintf(
    "Subject: Results of comparision between releases %s and %s on %s",
    @services,
    qx/date/, # <== this will add a new-line
);
my $EMAIL;
if (open ($EMAIL, "|$sendmail")) {
    select $EMAIL;
} else {
    warn "Cannot open sendmail: $! - printing to STDOUT\n";
}

my $long = '-' x 70;
my $half = '-' x 35;
my $NL = "\n";

print $reply_to;
print $subject;
print $send_to;
print "Content-type: text/plain\n\n"; # dbl NL for header/content separation
if (exists $in_both{high}) {
    print $long, $NL, $half, "In Both: Diff >= 10%", $NL, 
        join($NL, @{$in_both{high}}), $NL;
}
for (keys %only_in) {
    print $long, $NL, $half, "Only in $_:", $NL,
        join($NL, @{$only_in{$_}}), $NL;
}
if (exists $in_both{low}) {
    print '-' x 50, "In Both: Diff < 10%$NL", 
        join($NL, @{$in_both{low}}), $NL;
}
for (keys %failures_in) {
    print $long, $half, "Present in $_, but failed to execute:", $NL, 
        join($NL, @{$failures_in{$_}}), $NL;
}
exit()
